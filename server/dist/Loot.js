"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LootItem_1 = require("./LootItem");
const LootType_1 = require("./LootType");
const RoundObstacle_1 = require("./RoundObstacle");
const RectangleObstacle_1 = require("./RectangleObstacle");
class Loot {
    constructor(map) {
        this.lootId = 0;
        this.lootItems = [];
        this.randomPositionAttempts = 0;
        this.maxRandomPositionAttempts = 1000;
        this.map = map;
    }
    createLootItem(centerX, centerY, type, quantity = 1) {
        const loot = new LootItem_1.default(this.lootId++, centerX, centerY, type, quantity);
        if (centerX === 0 && centerY === 0)
            this.setRandomPosition(loot);
        this.lootItems.push(loot);
    }
    setRandomPosition(loot) {
        this.randomPositionAttempts++;
        const lootSize = loot.size * 3;
        const randomX = Math.floor(Math.random() * (this.map.getSize() - lootSize * 2)) + lootSize;
        const randomY = Math.floor(Math.random() * (this.map.getSize() - lootSize * 2)) + lootSize;
        loot.setX(randomX);
        loot.setY(randomY);
        //repeat
        if (this.randomPositionCollision(loot)) {
            this.setRandomPosition(loot);
        }
        else {
            //done
            if (loot.type === LootType_1.LootType.Pistol) {
                let directionX = 1;
                let directionY = 1;
                if (Math.random() > 0.5)
                    directionX = -1;
                if (Math.random() > 0.5)
                    directionY = -1;
                //+ammo
                this.lootItems.push(new LootItem_1.default(this.lootId++, loot.getCenterX() + loot.size * directionX, loot.getCenterY() + loot.size * directionY, LootType_1.LootType.OrangeAmmo, 30));
            }
            else if (loot.type === LootType_1.LootType.Rifle) {
                let directionX = 1;
                let directionY = 1;
                if (Math.random() > 0.5)
                    directionX = -1;
                if (Math.random() > 0.5)
                    directionY = -1;
                //+ammo
                this.lootItems.push(new LootItem_1.default(this.lootId++, loot.getCenterX() + loot.size * directionX, loot.getCenterY() + loot.size * directionY, LootType_1.LootType.GreenAmmo, 20));
            }
            else if (loot.type === LootType_1.LootType.Shotgun) {
                //+ammo
                let directionX = 1;
                let directionY = 1;
                if (Math.random() > 0.5)
                    directionX = -1;
                if (Math.random() > 0.5)
                    directionY = -1;
                this.lootItems.push(new LootItem_1.default(this.lootId++, loot.getCenterX() + loot.size * directionX, loot.getCenterY() + loot.size * directionY, LootType_1.LootType.RedAmmo, 10));
            }
            else if (loot.type === LootType_1.LootType.Machinegun) {
                //+ammo
                let directionX = 1;
                let directionY = 1;
                if (Math.random() > 0.5)
                    directionX = -1;
                if (Math.random() > 0.5)
                    directionY = -1;
                this.lootItems.push(new LootItem_1.default(this.lootId++, loot.getCenterX() + loot.size * directionX, loot.getCenterY() + loot.size * directionY, LootType_1.LootType.BlueAmmo, 30));
            }
        }
    }
    randomPositionCollision(loot) {
        for (const obstacle of this.map.rectangleObstacles) {
            if (this.lootInObstacle(loot, obstacle))
                return true;
        }
        for (const obstacle of this.map.impassableRoundObstacles) {
            if (this.lootInObstacle(loot, obstacle))
                return true;
        }
        for (const obstacle of this.map.bushes) {
            if (this.lootInObstacle(loot, obstacle))
                return true;
        }
        return false;
    }
    lootInObstacle(loot, obstacle) {
        let x = 0, y = 0, width = 0, height = 0;
        if (obstacle instanceof RectangleObstacle_1.default) {
            width = obstacle.width;
            height = obstacle.height;
            x = obstacle.x;
            y = obstacle.y;
        }
        if (obstacle instanceof RoundObstacle_1.default) {
            width = obstacle.size;
            height = obstacle.size;
            x = obstacle.x;
            y = obstacle.y;
        }
        //loot in obstacle
        const lootSize = loot.size * 3;
        if (x + width >= loot.getX() - lootSize &&
            x <= loot.getX() + lootSize &&
            loot.getY() + lootSize >= y &&
            loot.getY() - lootSize <= y + height) {
            return true;
        }
        else {
            return false;
        }
    }
    createMainLootItems(players) {
        for (let i = 0; i < players; i++) {
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Pistol, 10);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Rifle, 5);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Shotgun, 2);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Machinegun, 30);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Hammer);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Vest);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Scope2);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Scope4);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Scope6);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Granade, 3);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Smoke, 3);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.Medkit);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.RedAmmo, 10);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.GreenAmmo, 20);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.BlueAmmo, 30);
            if (Math.random() > 0.5)
                this.createLootItem(0, 0, LootType_1.LootType.OrangeAmmo, 30);
        }
    }
}
exports.default = Loot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Mb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQWtDO0FBQ2xDLHlDQUFzQztBQUd0QyxtREFBNEM7QUFDNUMsMkRBQW9EO0FBR3BELE1BQXFCLElBQUk7SUFPeEIsWUFBWSxHQUFRO1FBTFosV0FBTSxHQUFXLENBQUMsQ0FBQztRQUMzQixjQUFTLEdBQWUsRUFBRSxDQUFDO1FBQ25CLDJCQUFzQixHQUFXLENBQUMsQ0FBQztRQUNuQyw4QkFBeUIsR0FBVyxJQUFJLENBQUM7UUFHaEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDaEIsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFlLEVBQUUsT0FBZSxFQUFFLElBQWMsRUFBRSxXQUFtQixDQUFDO1FBQ3BGLE1BQU0sSUFBSSxHQUFHLElBQUksa0JBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0UsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDO1lBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxJQUFjO1FBQ3ZDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENB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