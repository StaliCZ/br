"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Player_1 = require("./Player");
const RectangleObstacle_1 = require("./RectangleObstacle");
const RoundObstacle_1 = require("./RoundObstacle");
const Tree_1 = require("./Tree");
class LootItem {
    constructor(id, x, y, type, quantity) {
        this.active = true;
        this.id = id;
        this.x = x;
        this.y = y;
        this.type = type;
        this.size = 60;
        this.radius = this.size / 2;
        this.quantity = quantity;
    }
    isPlayerIn(player) {
        const lootAndPlayerRadius = Player_1.Player.radius + this.radius;
        const x = this.getCenterX() - player.getCenterX();
        const y = this.getCenterY() - player.getCenterY();
        const distance = Math.sqrt(x * x + y * y);
        return distance < lootAndPlayerRadius;
    }
    isActive() {
        return this.active;
    }
    getX() {
        return this.x;
    }
    getY() {
        return this.y;
    }
    getCenterX() {
        return this.x + this.radius;
    }
    getCenterY() {
        return this.y + this.radius;
    }
    calcAngle(objectCenterX, objectCenterY) {
        let x = this.getCenterX() - objectCenterX;
        let y = this.getCenterY() - objectCenterY;
        if (x === 0)
            x += 0.1;
        if (y === 0)
            y -= 0.1;
        //atangens
        let angle = Math.abs(Math.atan(x / y) * 180 / Math.PI);
        let finalAngle = 0;
        //1..2..3..4.. Q; 0 - 90, 90 - 180...
        //1
        if (objectCenterX >= this.getCenterX() && objectCenterY < this.getCenterY()) {
            finalAngle = angle;
        }
        else if (objectCenterX >= this.getCenterX() && objectCenterY >= this.getCenterY()) {
            //2
            finalAngle = 180 - angle;
        }
        else if (objectCenterX < this.getCenterX() && objectCenterY >= this.getCenterY()) {
            //3
            finalAngle = 180 + angle;
        }
        else if (objectCenterX < this.getCenterX() && objectCenterY < this.getCenterY()) {
            //4
            finalAngle = 360 - angle;
        }
        finalAngle = Math.round(finalAngle);
        //random change
        const change = Math.floor(Math.random() * 30);
        let direction = 1;
        if (Math.round(Math.random()))
            direction = -1;
        finalAngle = finalAngle + direction * change;
        if (finalAngle > 359)
            finalAngle = finalAngle - 360;
        return finalAngle;
    }
    move(lootItems, map) {
        for (const lootItem of lootItems) {
            if (lootItem === this)
                continue;
            if (this.objectIn(lootItem)) {
                const angle = this.calcAngle(lootItem.getCenterX(), lootItem.getCenterY());
                this.shift(angle, map);
            }
        }
        for (const object of map.rocks) {
            if (object.isActive() && this.objectIn(object)) {
                const angle = this.calcAngle(object.getCenterX(), object.getCenterY());
                this.shift(angle, map);
            }
        }
        for (const object of map.trees) {
            if (object.isActive() && this.objectIn(object)) {
                const angle = this.calcAngle(object.getCenterX(), object.getCenterY());
                this.shift(angle, map);
            }
        }
        for (const object of map.rectangleObstacles) {
            if (object.isActive() && this.objectIn(object)) {
                const angle = this.calcAngle(object.x + object.width / 2, object.y + object.height / 2);
                this.shift(angle, map);
            }
        }
    }
    shift(angle, map) {
        const shiftZ = 1.2;
        let shiftX = Math.sin(angle * Math.PI / 180) * shiftZ;
        let shiftY = Math.cos(angle * Math.PI / 180) * shiftZ;
        this.x -= shiftX;
        this.y += shiftY;
        //map border
        if (this.x < 0)
            this.x = 0;
        if (this.y < 0)
            this.y = 0;
        if (this.x + this.size > map.getSize())
            this.x = map.getSize() - this.size;
        if (this.y + this.size > map.getSize())
            this.y = map.getSize() - this.size;
    }
    objectIn(object) {
        //triangle
        let objectRadius, objectCenterX, objectCenterY;
        if (object instanceof LootItem || object instanceof RoundObstacle_1.default) {
            objectRadius = object.radius;
            if (object instanceof Tree_1.default)
                objectRadius = object.treeTrankRadius;
            objectCenterX = object.getCenterX();
            objectCenterY = object.getCenterY();
        }
        else if (object instanceof RectangleObstacle_1.default) {
            objectRadius = object.width / 2;
            objectCenterX = object.x + object.width / 2;
            objectCenterY = object.y + object.height / 2;
        }
        const x = this.getCenterX() - objectCenterX;
        const y = this.getCenterY() - objectCenterY;
        const radius = Math.sqrt(x * x + y * y);
        const gap = 20;
        return radius < objectRadius + this.radius + gap;
    }
    take() {
        this.active = false;
    }
}
exports.default = LootItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9vdEl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTG9vdEl0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBa0M7QUFJbEMsMkRBQW9EO0FBQ3BELG1EQUE0QztBQUM1QyxpQ0FBMEI7QUFFMUIsTUFBcUIsUUFBUTtJQVU1QixZQUFZLEVBQVUsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLElBQWMsRUFBRSxRQUFnQjtRQUh0RSxXQUFNLEdBQVksSUFBSSxDQUFDO1FBSTlCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMxQixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQWM7UUFDeEIsTUFBTSxtQkFBbUIsR0FBRyxlQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDeEQsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsT0FBTyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7SUFDdkMsQ0FBQztJQUVELFFB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Q0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO2dCQUMzRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN2QjtTQUNEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQy9CLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO2dCQUN2RSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN2QjtTQUNEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQy9CLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO2dCQUN2RSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN2QjtTQUNEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHLENBQUMsa0JBQWtCLEVBQUU7WUFDNUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDL0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0s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