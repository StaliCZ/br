{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Terrain.ts","webpack:///./src/Point.ts","webpack:///./src/RoundObstacle.ts","webpack:///./src/View.ts","webpack:///./src/Hand.ts","webpack:///./src/Gun.ts","webpack:///./src/Tree.ts","webpack:///./src/Player.ts","webpack:///./src/Bush.ts","webpack:///./src/Rock.ts","webpack:///./src/RectangleObstacle.ts","webpack:///./src/Wall.ts","webpack:///./src/Map.ts","webpack:///./src/WaterTerrainData.ts","webpack:///./src/Bullet.ts","webpack:///./src/Model.ts","webpack:///./src/ServerClientSync.ts","webpack:///./src/Controller.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TerrainType","Terrain","type","x","y","width","height","this","angle","WaterTriangle2","WaterTriangle3","WaterTriangle4","RoundObstacle","size","opacity","active","hitAnimateTimer","radius","isPointIn","point","Math","sqrt","getCenterX","getCenterY","getOpacity","isActive","acceptHit","handCenter","createAnimateHit","hitAngle","abs","atan","PI","round","hitAnimateShiftX","sin","hitAnimateShiftY","cos","animate","animateX","animateY","src_Point","View","map","player","bullets","mouse","waterTerrainData","serverClientSync","_this","resolutionAdjustment","startDraw","canvas","document","getElementById","helperCanvas","ctx","getContext","playerSVG","Image","src","playerHandSVG","bushSVG","rockSVG","treeSVG","cursorSVG","loadingProgresSVG","loadingCircleSVG","pistolSVG","waterTrianglePNG","onload","saveWaterPixels","WaterTriangle1","screenResize","window","innerWidth","innerHeight","screenCenterX","screenCenterY","changeResolutionAdjustment","finalAdjustment","waterType","fillStyle","fillRect","middleImage","save","translate","rotate","drawImage","restore","Worker","worker","onmessage","e","setData","data","getImageData","postMessage","time","Date","getTime","console","log","draw","clearRect","blockSize","blocks","_i","_a","length","block","_b","howToDraw","isOnScreen","_c","_d","terrain","_e","Water","_f","_g","_h","_j","_k","_l","_m","_o","rocks","rock","_p","globalAlpha","_q","_r","rectangleObstacles","rectangleObstacle","_s","_t","gun","getAngle","_u","_v","hands","hand","_w","_x","_y","collisionPoints","_z","x_1","y_1","size_1","Controller_Controller","playerData","sort","a","b","tick","splice","ready","fillText","getTimeDiference","getDrawDelay","direction","wantedFrameTime","now","olderFrame","_0","_1","frame","newerFrame","sumaNewer","changeDrawDelay","reset","timeDistance","distanceOlderFromWantedFrameTime","percentShift","xDiference","direction_1","calculatedX","_2","_3","_4","_5","_6","_7","bushes","bush","_8","_9","_10","trees","tree","_11","_12","_13","bullet","_14","_15","loading","max","passedViewLoadingSteps","loadingSVGSize","timeToEnd","fontSize","font","toString","gameObject","animateShiftX","animateShiftY","src_RoundObstacle","animateShift","Hand","playerSize","shiftAngle","hitTimer","inAction","playerRadius","calculateCollisionsPoints","push","getX","getY","moveHand","playerAngle","playerX","playerY","obstacle","obstacleAndHandRadius","x_2","y_2","x_3","y_3","j","playerAngleForHand","hit","Gun","range","move","playerCenterX","playerCenterY","_super","Tree","treeTrankRadius","__extends","Player","speed","slowAroundObstacle","loadingTime","loadingMaxTime","src_Hand","src_Gun","setAngle","random","playerMove","up","left","down","right","mouseX","mouseY","shift","myXPositionOnTerrain","floor","myYPositionOnTerrain","includeWater","shiftX","shiftY","shiftOnPosition","rotatePlayer","changeHandsPosition","countShifts","shiftDirection","canIshift","pointOnMyPosition","goAroundRectangleObstacle","impassableRoundObstacles","roundObstacle","obstacleRadius","src_Tree","obstacleAndPlayerRadius","goAroundRoundObstacle","maxObstacleOverlap","centerX","centerY","Bush","Bush_extends","Rock","Rock_extends","RectangleObstacle","Wall","Wall_extends","src_RectangleObstacle","yy","xx","src_Bush","src_Rock","rock2","rock3","tree2","src_Wall","WaterTerrainData","waterTriangle1","waterTriangle2","waterTriangle3","waterTriangle4","Error","waterData","state","Bullet","distance","collisions","bulletPoint","flying","Model","keys","socket","halfFPS","src_WaterTerrainData","src_Map","src_Player","view","src_View","setTimeout","gameLoop","requestAnimationFrame","emit","w","src_Bullet","ServerClientSync","ping","pings","timeDiference","timeDiferences","attempts","defaultDrawDelay","drawDelay","getPing","addData","pingsSuma","timeDiferenceSuma","change","Controller","middle","getElementsByTagName","io","connect","src_ServerClientSync","_socket","model","src_Model","addEventListener","event","Event","dispatchEvent","keysController","mouseController","socketController","run","instance","on","clientDateNow","serverDateNow","timeNow","timeDiferenceClientServer","serverTime","undefined","code"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum TerrainType {\r\n\tWater,\r\n\tWaterTriangle1,\r\n\tWaterTriangle2,\r\n\tWaterTriangle3,\r\n\tWaterTriangle4\r\n}\r\n\r\nexport class Terrain {\r\n\treadonly type: TerrainType;\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n\treadonly width: number;\r\n\treadonly height: number;\r\n\treadonly angle: number = 0;\r\n\r\n\tconstructor(type: TerrainType, x: number, y: number, width: number, height: number) {\r\n\t\tthis.type = type;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase TerrainType.WaterTriangle2:\r\n\t\t\t\tthis.angle = 90;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle3:\r\n\t\t\t\tthis.angle = 180;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle4:\r\n\t\t\t\tthis.angle = 270;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n","export default class Point {\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n\r\n\tconstructor(x: number, y: number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default abstract class RoundObstacle {\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n\tprotected opacity: number = 1;\r\n\treadonly size: number;\r\n\treadonly radius: number;\r\n\tprivate active: boolean = true;\r\n\tprivate hitAnimateTimer: number = 0;\r\n\tprivate hitAnimateShiftX: number;\r\n\tprivate hitAnimateShiftY: number;\r\n\r\n\tconstructor(x: number, y: number, size: number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.size = size;\r\n\t\tthis.radius = size / 2;\r\n\t}\r\n\r\n\tisPointIn(point: Point): boolean {\r\n\t\t//triangle\r\n\t\tconst x = this.x + this.radius - point.x;\r\n\t\tconst y = this.y + this.radius - point.y;\r\n\t\tconst radius = Math.sqrt(x * x + y * y);\r\n\t\tif (radius <= this.radius) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetCenterX(): number {\r\n\t\treturn this.x + this.size / 2;\r\n\t}\r\n\r\n\tgetCenterY(): number {\r\n\t\treturn this.y + this.size / 2;\r\n\t}\r\n\r\n\tgetOpacity(): number {\r\n\t\treturn this.opacity;\r\n\t}\r\n\r\n\tisActive(): boolean {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\tacceptHit(handCenter: Point): void {\r\n\t\tif (this.opacity > 0.1) this.opacity -= 0.1;\r\n\t\tthis.createAnimateHit(handCenter);\r\n\t\tif (this.opacity < 0.1) {\r\n\t\t\tthis.active = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createAnimateHit(handCenter: Point): void {\r\n\t\tconst x = handCenter.x - this.getCenterX();\r\n\t\tconst y = handCenter.y - this.getCenterY();\r\n\t\tlet hitAngle = Math.abs(Math.atan(x / y) * (180 / Math.PI));\r\n\t\t//1..2..3..4.. Q; 0 - 90, 90 - 180...\r\n\t\t//1\r\n\t\tif (handCenter.x >= this.getCenterX() && handCenter.y < this.getCenterY()) {\r\n\t\t\thitAngle = hitAngle;\r\n\t\t}\r\n\t\t//2\r\n\t\tif (handCenter.x >= this.getCenterX() && handCenter.y >= this.getCenterY()) {\r\n\t\t\thitAngle = 180 - hitAngle;\r\n\t\t}\r\n\t\t//3\r\n\t\tif (handCenter.x < this.getCenterX() && handCenter.y >= this.getCenterY()) {\r\n\t\t\thitAngle = 180 + hitAngle;\r\n\t\t}\r\n\t\t//4\r\n\t\tif (handCenter.x < this.getCenterX() && handCenter.y < this.getCenterY()) {\r\n\t\t\thitAngle = 360 - hitAngle;\r\n\t\t}\r\n\t\thitAngle = Math.round(hitAngle);\r\n\t\tif (hitAngle === 360) hitAngle = 0;\r\n\r\n\t\tthis.hitAnimateTimer = 10;\r\n\t\t//triangle\r\n\t\tconst hitShift = 3;\r\n\t\tthis.hitAnimateShiftX = Math.sin(hitAngle * Math.PI / 180) * hitShift * -1;\r\n\t\tthis.hitAnimateShiftY = Math.cos(hitAngle * Math.PI / 180) * hitShift;\r\n\t}\r\n\r\n\tanimate(): Point {\r\n\t\tlet animateX = 0;\r\n\t\tlet animateY = 0;\r\n\t\tif (this.hitAnimateTimer > 0) this.hitAnimateTimer--;\r\n\t\tswitch (this.hitAnimateTimer) {\r\n\t\t\tcase 1:\r\n\t\t\t\tanimateX = this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tanimateX = 2 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 2 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tanimateX = 3 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 3 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tanimateX = 4 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 4 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tanimateX = 5 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 5 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tanimateX = 4 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 4 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7:\r\n\t\t\t\tanimateX = 3 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 3 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tanimateX = 2 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 2 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\tanimateX = 1 * this.hitAnimateShiftX;\r\n\t\t\t\tanimateY = 1 * this.hitAnimateShiftY;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn new Point(animateX, animateY);\r\n\t}\r\n}\r\n","import Player from './Player';\r\nimport Map from './Map';\r\nimport { Mouse } from './Controller';\r\nimport WaterTerrainData from './WaterTerrainData';\r\nimport { TerrainType } from './Terrain';\r\nimport Bullet from './Bullet';\r\nimport RoundObstacle from './RoundObstacle';\r\nimport RectangleObstacle from './RectangleObstacle';\r\nimport Tree from './Tree';\r\nimport ServerClientSync from './ServerClientSync';\r\n\r\nimport { Controller } from './Controller';\r\n\r\ntype DrawData = {\r\n\tx: number;\r\n\ty: number;\r\n\tsize: number;\r\n\twidth: number;\r\n\theight: number;\r\n\tisOnScreen: boolean;\r\n};\r\n\r\ninterface RoundObject {\r\n\tx: number;\r\n\ty: number;\r\n\tsize: number;\r\n}\r\n\r\ninterface RectObject {\r\n\tx: number;\r\n\ty: number;\r\n\twidth: number;\r\n\theight: number;\r\n}\r\n\r\nexport default class View {\r\n\tprivate canvas: HTMLCanvasElement;\r\n\tprivate helperCanvas: HTMLCanvasElement;\r\n\tprivate ctx: CanvasRenderingContext2D;\r\n\tprivate playerSVG: HTMLImageElement;\r\n\tprivate playerHandSVG: HTMLImageElement;\r\n\tprivate bushSVG: HTMLImageElement;\r\n\tprivate rockSVG: HTMLImageElement;\r\n\tprivate treeSVG: HTMLImageElement;\r\n\tprivate pistolSVG: HTMLImageElement;\r\n\tprivate cursorSVG: HTMLImageElement;\r\n\tprivate loadingProgresSVG: HTMLImageElement;\r\n\tprivate loadingCircleSVG: HTMLImageElement;\r\n\tprivate waterTrianglePNG: HTMLImageElement;\r\n\tprivate waterTerrainData: WaterTerrainData;\r\n\tprivate resolutionAdjustment: number = 1;\r\n\tprivate screenCenterX: number;\r\n\tprivate screenCenterY: number;\r\n\tprivate map: Map;\r\n\tprivate player: Player;\r\n\tprivate bullets: Bullet[];\r\n\tprivate mouse: Mouse;\r\n\r\n\tprivate startDraw = false;\r\n\tprivate lastDrawFrameTS: number;\r\n\tprivate lastDrawFrame: number;\r\n\tprivate lastDraw: any;\r\n\r\n\tprivate serverClientSync: ServerClientSync;\r\n\r\n\tconstructor(\r\n\t\tmap: Map,\r\n\t\tplayer: Player,\r\n\t\tbullets: Bullet[],\r\n\t\tmouse: Mouse,\r\n\t\twaterTerrainData: WaterTerrainData,\r\n\t\tserverClientSync: ServerClientSync\r\n\t) {\r\n\t\tthis.serverClientSync = serverClientSync;\r\n\t\tthis.map = map;\r\n\t\tthis.player = player;\r\n\t\tthis.bullets = bullets;\r\n\t\tthis.mouse = mouse;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById('gameScreen');\r\n\t\tthis.helperCanvas = <HTMLCanvasElement>document.getElementById('helper');\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n\r\n\t\tthis.playerSVG = new Image();\r\n\t\tthis.playerSVG.src = 'img/player.svg';\r\n\r\n\t\tthis.playerHandSVG = new Image();\r\n\t\tthis.playerHandSVG.src = 'img/hand.svg';\r\n\r\n\t\tthis.bushSVG = new Image();\r\n\t\tthis.bushSVG.src = 'img/bush.svg';\r\n\r\n\t\tthis.rockSVG = new Image();\r\n\t\tthis.rockSVG.src = 'img/rock.svg';\r\n\r\n\t\tthis.treeSVG = new Image();\r\n\t\tthis.treeSVG.src = 'img/tree.svg';\r\n\r\n\t\tthis.cursorSVG = new Image();\r\n\t\tthis.cursorSVG.src = 'img/cursor.svg';\r\n\r\n\t\tthis.loadingProgresSVG = new Image();\r\n\t\tthis.loadingProgresSVG.src = 'img/loadingProgres.svg';\r\n\r\n\t\tthis.loadingCircleSVG = new Image();\r\n\t\tthis.loadingCircleSVG.src = 'img/loadingCircle.svg';\r\n\r\n\t\tthis.pistolSVG = new Image();\r\n\t\tthis.pistolSVG.src = 'img/pistol.svg';\r\n\r\n\t\tthis.waterTrianglePNG = new Image();\r\n\t\tthis.waterTrianglePNG.src = 'img/waterTriangle.png';\r\n\r\n\t\tthis.waterTerrainData = waterTerrainData;\r\n\t\tthis.waterTrianglePNG.onload = () => {\r\n\t\t\tthis.saveWaterPixels(TerrainType.WaterTriangle1);\r\n\t\t\tthis.saveWaterPixels(TerrainType.WaterTriangle2);\r\n\t\t\tthis.saveWaterPixels(TerrainType.WaterTriangle3);\r\n\t\t\tthis.saveWaterPixels(TerrainType.WaterTriangle4);\r\n\t\t\t//this.waterTerrainData.write();\r\n\t\t};\r\n\t\tthis.screenResize();\r\n\t}\r\n\r\n\tscreenResize(): void {\r\n\t\tthis.canvas.width = window.innerWidth;\r\n\t\tthis.canvas.height = window.innerHeight;\r\n\t\tthis.screenCenterX = window.innerWidth / 2;\r\n\t\tthis.screenCenterY = window.innerHeight / 2;\r\n\t\tthis.changeResolutionAdjustment();\r\n\t}\r\n\r\n\tprivate changeResolutionAdjustment(): void {\r\n\t\tconst defaultWidth = 1920;\r\n\t\tconst defaultHeight = 1050;\r\n\t\tconst width = this.canvas.width / defaultWidth;\r\n\t\tconst height = this.canvas.height / defaultHeight;\r\n\t\tconst finalAdjustment = (width + height) / 2;\r\n\t\tthis.resolutionAdjustment = finalAdjustment;\r\n\t\t//console.log('finalAdjustment:', finalAdjustment);\r\n\t}\r\n\r\n\tprivate saveWaterPixels(waterType: TerrainType): void {\r\n\t\tconst ctx = this.helperCanvas.getContext('2d');\r\n\t\tthis.helperCanvas.width = this.waterTrianglePNG.width;\r\n\t\tthis.helperCanvas.height = this.waterTrianglePNG.height;\r\n\t\t//white background\r\n\t\tctx.fillStyle = '#FFFFFF';\r\n\t\tctx.fillRect(0, 0, this.helperCanvas.width, this.helperCanvas.height);\r\n\t\tlet middleImage = this.waterTrianglePNG.width / 2;\r\n\t\tctx.save();\r\n\t\tctx.translate(middleImage, middleImage);\r\n\t\tswitch (waterType) {\r\n\t\t\tcase TerrainType.WaterTriangle1:\r\n\t\t\t\tctx.rotate(0 * Math.PI / 180);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle2:\r\n\t\t\t\tctx.rotate(90 * Math.PI / 180);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle3:\r\n\t\t\t\tctx.rotate(180 * Math.PI / 180);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle4:\r\n\t\t\t\tctx.rotate(270 * Math.PI / 180);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tctx.drawImage(this.waterTrianglePNG, -middleImage, -middleImage);\r\n\t\tctx.restore();\r\n\r\n\t\t//worker\r\n\t\tif (typeof Worker !== 'undefined') {\r\n\t\t\tconst worker = new Worker('workerFindWater.js');\r\n\t\t\tworker.onmessage = (e) => {\r\n\t\t\t\t//console.log(new Date().getTime() - e.data.time, e.data);\r\n\t\t\t\tthis.waterTerrainData.setData(e.data.type, e.data.data);\r\n\t\t\t};\r\n\t\t\tconst data = ctx.getImageData(0, 0, this.waterTrianglePNG.width, this.waterTrianglePNG.height).data;\r\n\t\t\tworker.postMessage({\r\n\t\t\t\tdata,\r\n\t\t\t\tsize: this.waterTrianglePNG.width,\r\n\t\t\t\ttype: waterType,\r\n\t\t\t\ttime: new Date().getTime()\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"Your browser doesn't support web workers.\");\r\n\t\t}\r\n\t}\r\n\r\n\tdraw(): void {\r\n\t\tconst ctx = this.ctx;\r\n\t\t//clear canvas\r\n\t\tctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\t\t//water\r\n\t\tctx.fillStyle = '#69A2E0';\r\n\t\tctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\t\t//grass blocks\r\n\t\tctx.fillStyle = '#A2CB69';\r\n\t\tconst blockSize = this.map.blocks[1].x;\r\n\t\tfor (const block of this.map.blocks) {\r\n\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({ x: block.x, y: block.y, size: blockSize });\r\n\t\t\tif (isOnScreen) {\r\n\t\t\t\tctx.fillRect(x, y, size, size);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//water terrain blocks\r\n\t\tctx.fillStyle = '#69A2E0';\r\n\t\tfor (const terrain of this.map.terrain) {\r\n\t\t\tconst { x, y, width, height, isOnScreen } = this.howToDraw({\r\n\t\t\t\tx: terrain.x,\r\n\t\t\t\ty: terrain.y,\r\n\t\t\t\twidth: terrain.width,\r\n\t\t\t\theight: terrain.height\r\n\t\t\t});\r\n\t\t\tif (isOnScreen) {\r\n\t\t\t\tif (terrain.type === TerrainType.Water) {\r\n\t\t\t\t\tctx.fillRect(x, y, width, height);\r\n\t\t\t\t}\r\n\t\t\t\telse if (terrain.type === TerrainType.WaterTriangle1) {\r\n\t\t\t\t\tctx.drawImage(this.waterTrianglePNG, x, y, width, height);\r\n\t\t\t\t}\r\n\t\t\t\telse if (\r\n\t\t\t\t\tterrain.type === TerrainType.WaterTriangle2 ||\r\n\t\t\t\t\tterrain.type === TerrainType.WaterTriangle3 ||\r\n\t\t\t\t\tterrain.type === TerrainType.WaterTriangle4\r\n\t\t\t\t) {\r\n\t\t\t\t\tlet middleImage = width / 2;\r\n\t\t\t\t\tthis.ctx.save();\r\n\t\t\t\t\tthis.ctx.translate(x + middleImage, y + middleImage);\r\n\t\t\t\t\tthis.ctx.rotate(terrain.angle * Math.PI / 180);\r\n\t\t\t\t\tthis.ctx.drawImage(this.waterTrianglePNG, -middleImage, -middleImage, width, height);\r\n\t\t\t\t\tthis.ctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//mapGrid\r\n\t\tctx.fillStyle = 'gray';\r\n\t\tfor (const block of this.map.blocks) {\r\n\t\t\t//top\r\n\t\t\tif (block.y === 0) {\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({\r\n\t\t\t\t\tx: block.x,\r\n\t\t\t\t\ty: block.y,\r\n\t\t\t\t\tsize: blockSize\r\n\t\t\t\t});\r\n\t\t\t\tif (isOnScreen) ctx.fillRect(x, y, size, 1);\r\n\t\t\t}\r\n\t\t\t//bottom\r\n\t\t\t{\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({\r\n\t\t\t\t\tx: block.x,\r\n\t\t\t\t\ty: block.y + blockSize,\r\n\t\t\t\t\tsize: blockSize\r\n\t\t\t\t});\r\n\t\t\t\tif (isOnScreen) ctx.fillRect(x, y, size, 1);\r\n\t\t\t}\r\n\t\t\t//left\r\n\t\t\tif (block.x === 0) {\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({\r\n\t\t\t\t\tx: block.x,\r\n\t\t\t\t\ty: block.y,\r\n\t\t\t\t\tsize: blockSize\r\n\t\t\t\t});\r\n\t\t\t\tif (isOnScreen) ctx.fillRect(x, y, 1, size);\r\n\t\t\t}\r\n\t\t\t//right\r\n\t\t\t{\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({\r\n\t\t\t\t\tx: block.x + blockSize,\r\n\t\t\t\t\ty: block.y,\r\n\t\t\t\t\tsize: blockSize\r\n\t\t\t\t});\r\n\t\t\t\tif (isOnScreen) ctx.fillRect(x, y, 1, size);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//rocks\r\n\t\tfor (const rock of this.map.rocks) {\r\n\t\t\tif (rock.isActive()) {\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw(rock);\r\n\t\t\t\tif (isOnScreen) {\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.globalAlpha = rock.getOpacity();\r\n\t\t\t\t\tctx.drawImage(this.rockSVG, x, y, size, size);\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//walls\r\n\t\tctx.fillStyle = 'black';\r\n\t\tfor (const rectangleObstacle of this.map.rectangleObstacles) {\r\n\t\t\tif (rectangleObstacle.isActive()) {\r\n\t\t\t\tconst { x, y, width, height, isOnScreen } = this.howToDraw(rectangleObstacle);\r\n\t\t\t\tif (isOnScreen) {\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.globalAlpha = rectangleObstacle.getOpacity();\r\n\t\t\t\t\tctx.fillRect(x, y, width, height);\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//pistol\r\n\t\t{\r\n\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\tx: this.player.gun.getX(),\r\n\t\t\t\ty: this.player.gun.getY(),\r\n\t\t\t\tsize: this.player.gun.size\r\n\t\t\t});\r\n\t\t\tconst middleImage = size / 2;\r\n\t\t\tthis.ctx.save();\r\n\t\t\tthis.ctx.translate(x + middleImage, y + middleImage);\r\n\t\t\tthis.ctx.rotate(this.player.gun.getAngle() * Math.PI / 180);\r\n\t\t\tctx.drawImage(this.pistolSVG, -middleImage, -middleImage, size, size);\r\n\t\t\tthis.ctx.restore();\r\n\t\t}\r\n\r\n\t\t//player\r\n\t\t{\r\n\t\t\t//hands\r\n\t\t\tfor (const hand of this.player.hands) {\r\n\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\tx: hand.getX(),\r\n\t\t\t\t\ty: hand.getY(),\r\n\t\t\t\t\tsize: hand.size\r\n\t\t\t\t});\r\n\t\t\t\tctx.drawImage(this.playerHandSVG, x, y, size, size);\r\n\t\t\t\t//collisionPoints\r\n\t\t\t\tfor (const point of hand.collisionPoints) {\r\n\t\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\t\tx: hand.getCenterX() + point.x,\r\n\t\t\t\t\t\ty: hand.getCenterY() + point.y,\r\n\t\t\t\t\t\tsize: 1\r\n\t\t\t\t\t});\r\n\t\t\t\t\tctx.fillRect(x, y, size, size);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//player\r\n\t\t\t/*\r\n\t\t\t//client data\r\n\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\tx: this.player.getX(),\r\n\t\t\t\ty: this.player.getY(),\r\n\t\t\t\tsize: this.player.size\r\n\t\t\t});\r\n\t\t\t*/\r\n\r\n\t\t\t//1. urcime si cas pred nejakou dobou a budeme hledat snimky hry pred timto a za timto bodem\r\n\t\t\t//2. nemuzeme se spolehnout jen na cas klienta a musime nejperve synchronizovat\r\n\t\t\t//3. dopocitame priblizny stav mezi snimky\r\n\t\t\t//4. vykreslime\r\n\r\n\t\t\t//sort - zatim nutne pro simulaci pingu...\r\n\t\t\tController.playerData.sort((a, b) => {\r\n\t\t\t\treturn a.tick - b.tick;\r\n\t\t\t});\r\n\r\n\t\t\t//mazani dat ze zasobniku\r\n\t\t\tif (Controller.playerData.length > 50) {\r\n\t\t\t\tController.playerData.splice(0, 5);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.serverClientSync.ready()) {\r\n\t\t\t\tctx.fillStyle = 'white';\r\n\t\t\t\tctx.fillText('Count frames: ' + Controller.playerData.length, 20, 40);\r\n\t\t\t\tctx.fillText('Time Diference: ' + this.serverClientSync.getTimeDiference(), 20, 80);\r\n\t\t\t\tctx.fillText('Draw delay ' + this.serverClientSync.getDrawDelay(), 20, 120);\r\n\r\n\t\t\t\t//time\r\n\t\t\t\t//server time is <\r\n\t\t\t\tlet direction = 1;\r\n\t\t\t\t//server time is >\r\n\t\t\t\tif (this.serverClientSync.getTimeDiference() < 0) direction = -1;\r\n\t\t\t\t//time on server\r\n\t\t\t\tconst timeNowOnServer = Date.now() + this.serverClientSync.getTimeDiference() * direction;\r\n\t\t\t\t//const delay = 70;\r\n\t\t\t\tconst wantedFrameTime = timeNowOnServer - this.serverClientSync.getDrawDelay();\r\n\r\n\t\t\t\t//find last older (or same <=) frame\r\n\t\t\t\tlet olderFrame;\r\n\t\t\t\tfor (const frame of Controller.playerData) {\r\n\t\t\t\t\tif (frame.time <= wantedFrameTime) olderFrame = frame;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//find newer (or same >=) frame\r\n\t\t\t\tlet newerFrame;\r\n\t\t\t\tlet sumaNewer = 0;\r\n\t\t\t\tfor (let i = Controller.playerData.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst frame = Controller.playerData[i];\r\n\t\t\t\t\tif (frame.time >= wantedFrameTime) {\r\n\t\t\t\t\t\tnewerFrame = frame;\r\n\t\t\t\t\t\tsumaNewer++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//change delay\r\n\t\t\t\tif (sumaNewer > 2) this.serverClientSync.changeDrawDelay(-0.1);\r\n\t\t\t\tif (sumaNewer < 2) this.serverClientSync.changeDrawDelay(0.1);\r\n\r\n\t\t\t\t//err\r\n\t\t\t\tif (!olderFrame) console.log('olderFrame is missing');\r\n\t\t\t\tif (!newerFrame) console.log('newerFrame is missing');\r\n\t\t\t\tif (!olderFrame || !newerFrame) {\r\n\t\t\t\t\t//Controller._socket.emit('syncTime', 0);\r\n\t\t\t\t\t//console.log('new sync');\r\n\t\t\t\t\tthis.serverClientSync.reset();\r\n\r\n\t\t\t\t\t//err\r\n\t\t\t\t\tctx.fillStyle = 'white';\r\n\t\t\t\t\tctx.fillText('frame missing', 20, 300);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//count position\r\n\t\t\t\tif (olderFrame && newerFrame) {\r\n\t\t\t\t\tconst timeDistance = newerFrame.time - olderFrame.time;\r\n\t\t\t\t\tconst distanceOlderFromWantedFrameTime = wantedFrameTime - olderFrame.time;\r\n\t\t\t\t\tlet percentShift = 0;\r\n\t\t\t\t\tif (timeDistance) {\r\n\t\t\t\t\t\tpercentShift = distanceOlderFromWantedFrameTime / timeDistance;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//console.log('percentShift', percentShift);\r\n\r\n\t\t\t\t\tconst xDiference = Math.abs(newerFrame.x - olderFrame.x);\r\n\t\t\t\t\tlet direction = 1;\r\n\t\t\t\t\tif (newerFrame.x < olderFrame.x) direction = -1;\r\n\t\t\t\t\tlet calculatedX = olderFrame.x + xDiference * percentShift * direction;\r\n\t\t\t\t\t//calculatedX = olderFrame.x;\r\n\t\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\t\tx: calculatedX,\r\n\t\t\t\t\t\ty: 300,\r\n\t\t\t\t\t\tsize: this.player.size\r\n\t\t\t\t\t});\r\n\t\t\t\t\tctx.drawImage(this.playerSVG, x, y, size, size);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\tif (!this.lastDrawFrameTS && Controller.playerData.length) {\r\n\t\t\t\tthis.lastDrawFrameTS = Controller.playerData[Controller.playerData.length - 1].time;\r\n\t\t\t\tconsole.log(1111, this.lastDrawFrameTS);\r\n\t\t\t}\r\n\r\n\t\t\t//////////////\r\n\r\n\t\t\tconst serverData = Controller.playerData;\r\n\t\t\tif (serverData.length >= 5) {\r\n\t\t\t\tlet drawThis;\r\n\t\t\t\tif (this.lastDrawFrame) {\r\n\t\t\t\t\tfor (const frame of serverData) {\r\n\t\t\t\t\t\tif (frame.tick === this.lastDrawFrame + 1) {\r\n\t\t\t\t\t\t\tdrawThis = frame;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nahrada = false;\r\n\t\t\t\tif (!drawThis && this.lastDraw) {\r\n\t\t\t\t\tdrawThis = this.lastDraw;\r\n\t\t\t\t\tconsole.log('frame nenalezen');\r\n\t\t\t\t\tnahrada = true;\r\n\r\n\t\t\t\t\tconst last = this.lastDraw;\r\n\t\t\t\t\tconst lastLastTick = this.lastDraw.tick - 1;\r\n\t\t\t\t\tlet lastLast;\r\n\t\t\t\t\tfor (const frame of serverData) {\r\n\t\t\t\t\t\tif (frame.tick === lastLastTick) {\r\n\t\t\t\t\t\t\tlastLast = frame;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet calculatedFrame = { x: 0, y: this.lastDraw.y, tick: this.lastDraw + 1 };\r\n\t\t\t\t\tif (last && lastLast) {\r\n\t\t\t\t\t\tconst diference = Math.abs(last.x - lastLast.x);\r\n\t\t\t\t\t\tlet direction = 1;\r\n\t\t\t\t\t\tif (lastLast.x > last.x) direction = -1;\r\n\t\t\t\t\t\tcalculatedFrame.x = last.x + diference * direction;\r\n\t\t\t\t\t\tdrawThis = calculatedFrame;\r\n\t\t\t\t\t\tconsole.log('frame dopocitan');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (drawThis) {\r\n\t\t\t\t\tthis.lastDraw = drawThis;\r\n\t\t\t\t\tthis.lastDrawFrame = drawThis.tick;\r\n\t\t\t\t\t//console.log('drawwwwwwwwwwww');\r\n\t\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\t\tx: drawThis.x,\r\n\t\t\t\t\t\ty: drawThis.y,\r\n\t\t\t\t\t\tsize: this.player.size\r\n\t\t\t\t\t});\r\n\t\t\t\t\tctx.drawImage(this.playerSVG, x, y, size, size);\r\n\t\t\t\t}\r\n\t\t\t\tif (nahrada) this.lastDrawFrame = null;\r\n\r\n\t\t\t\tif (serverData.length >= 5 && !this.lastDrawFrame) {\r\n\t\t\t\t\tthis.lastDrawFrame = serverData[serverData.length - 3].tick;\r\n\t\t\t\t\tconsole.log('okkkkkkkkkkkkkkkkkkkk');\r\n\t\t\t\t\tconsole.log(this.lastDrawFrame);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//////////////////\r\n\r\n\t\t\tif (Controller.playerData.length > 10 && this.lastDrawFrameTS) {\r\n\t\t\t\tconst frameDelay = 100;\r\n\r\n\t\t\t\tlet thisFrameTime;\r\n\t\t\t\tthisFrameTime = this.lastDrawFrameTS + frameDelay;\r\n\r\n\t\t\t\t//find older (<= or equal) and newer (or equal)\r\n\t\t\t\tlet older;\r\n\t\t\t\tfor (let i = 0; i < Controller.playerData.length; i++) {\r\n\t\t\t\t\tconst frame = Controller.playerData[i];\r\n\t\t\t\t\tif (frame.time <= thisFrameTime) {\r\n\t\t\t\t\t\tolder = frame;\r\n\t\t\t\t\t\t//console.log('older', i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet newer;\r\n\t\t\t\tfor (let i = Controller.playerData.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst frame = Controller.playerData[i];\r\n\t\t\t\t\tif (frame.time >= thisFrameTime) {\r\n\t\t\t\t\t\tnewer = frame;\r\n\t\t\t\t\t\t//console.log('newer', i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//newer do not exists\r\n\t\t\t\tif (!newer) newer = older;\r\n\r\n\t\t\t\tlet drawFrame;\r\n\t\t\t\tif (older && newer) {\r\n\t\t\t\t\t//which is closer?\r\n\t\t\t\t\tif (Math.abs(thisFrameTime - older) <= Math.abs(thisFrameTime - newer)) {\r\n\t\t\t\t\t\t//older\r\n\t\t\t\t\t\tdrawFrame = older;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//newer\r\n\t\t\t\t\t\tdrawFrame = newer;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (drawFrame && false) {\r\n\t\t\t\t\tthis.lastDrawFrameTS = drawFrame.time;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//let xx = drawFrame.x;\r\n\t\t\t\t\t//let yy = drawFrame.y;\r\n\r\n\r\n\t\t\t\t\t//const last = Controller.playerData[Controller.playerData.length - 3];\r\n\t\t\t\t\tlet xx = drawFrame.x;\r\n\t\t\t\t\tlet yy = drawFrame.y;\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\t//draw between frames\r\n\t\t\t\t\t//xx = (older.x + newer.x) / 2;\r\n\t\t\t\t\t//yy = (older.y + newer.y) / 2;\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\t\tx: xx,\r\n\t\t\t\t\t\ty: yy,\r\n\t\t\t\t\t\tsize: this.player.size\r\n\t\t\t\t\t});\r\n\t\t\t\t\tctx.drawImage(this.playerSVG, x, y, size, size);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Controller.playerData.length > 20) {\r\n\t\t\t\t\tController.playerData.splice(0, 5);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(Controller.playerData.length);\r\n*/\r\n\t\t\t//collision points\r\n\t\t\tctx.fillStyle = 'blue';\r\n\t\t\tfor (const point of this.player.collisionPoints) {\r\n\t\t\t\tconst { x, y, size } = this.howToDraw({\r\n\t\t\t\t\tx: this.player.getCenterX() + point.x,\r\n\t\t\t\t\ty: this.player.getCenterY() + point.y,\r\n\t\t\t\t\tsize: 1\r\n\t\t\t\t});\r\n\t\t\t\tctx.fillRect(x, y, size, size);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//bushes\r\n\t\tfor (const bush of this.map.bushes) {\r\n\t\t\tif (bush.isActive()) {\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw(bush);\r\n\t\t\t\tif (isOnScreen) {\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.globalAlpha = bush.getOpacity();\r\n\t\t\t\t\tctx.drawImage(this.bushSVG, x, y, size, size);\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//trees\r\n\t\tfor (const tree of this.map.trees) {\r\n\t\t\tif (tree.isActive()) {\r\n\t\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw(tree);\r\n\t\t\t\tif (isOnScreen) {\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.globalAlpha = tree.getOpacity();\r\n\t\t\t\t\tctx.drawImage(this.treeSVG, x, y, size, size);\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//bullets\r\n\t\tctx.fillStyle = 'red';\r\n\t\tfor (const bullet of this.bullets) {\r\n\t\t\tconst { x, y, size, isOnScreen } = this.howToDraw({\r\n\t\t\t\tx: bullet.getX(),\r\n\t\t\t\ty: bullet.getY(),\r\n\t\t\t\tsize: bullet.size\r\n\t\t\t});\r\n\t\t\tif (isOnScreen) ctx.fillRect(x, y, size, size);\r\n\t\t}\r\n\r\n\t\t//loading\r\n\t\tconst { time, max } = this.player.loading();\r\n\t\tif (time < max) {\r\n\t\t\tconst maxViewLoadingSteps = 360;\r\n\t\t\tconst passedViewLoadingSteps = maxViewLoadingSteps / (max / time);\r\n\t\t\tconst loadingSVGSize = 100 * this.resolutionAdjustment;\r\n\t\t\tconst middleImage = loadingSVGSize / 2;\r\n\t\t\tconst x = this.screenCenterX - middleImage;\r\n\t\t\tconst y = this.screenCenterY - middleImage - 150 * this.resolutionAdjustment;\r\n\t\t\tconst timeToEnd = Math.round((max - time) / 60 * 10) / 10;\r\n\t\t\t//background\r\n\t\t\tctx.save();\r\n\t\t\tctx.globalAlpha = 0.2;\r\n\t\t\tctx.drawImage(this.loadingCircleSVG, x, y, loadingSVGSize, loadingSVGSize);\r\n\r\n\t\t\tctx.restore();\r\n\t\t\tfor (let i = 0; i < passedViewLoadingSteps; i += 10) {\r\n\t\t\t\tthis.ctx.save();\r\n\t\t\t\tthis.ctx.translate(x + middleImage, y + middleImage);\r\n\t\t\t\tthis.ctx.rotate(i * Math.PI / 180);\r\n\t\t\t\tctx.drawImage(this.loadingProgresSVG, -middleImage, -middleImage, loadingSVGSize, loadingSVGSize);\r\n\t\t\t\tthis.ctx.restore();\r\n\t\t\t}\r\n\t\t\tconst fontSize = 31 * this.resolutionAdjustment;\r\n\t\t\tctx.font = fontSize + 'px Arial';\r\n\t\t\tctx.fillStyle = 'white';\r\n\t\t\tctx.fillText(timeToEnd.toString(), x + 28 * this.resolutionAdjustment, y + 59 * this.resolutionAdjustment);\r\n\t\t}\r\n\r\n\t\t//cursor\r\n\t\tconst mouseSize = 25;\r\n\t\tctx.drawImage(\r\n\t\t\tthis.cursorSVG,\r\n\t\t\tthis.mouse.x - mouseSize * this.resolutionAdjustment / 2,\r\n\t\t\tthis.mouse.y - mouseSize * this.resolutionAdjustment / 2,\r\n\t\t\tmouseSize * this.resolutionAdjustment,\r\n\t\t\tmouseSize * this.resolutionAdjustment\r\n\t\t);\r\n\t}\r\n\r\n\tprivate howToDraw(gameObject: RoundObject | RectObject | RectangleObstacle | RoundObstacle): DrawData {\r\n\t\t//size\r\n\t\tlet size = 0;\r\n\t\tlet width = 0;\r\n\t\tlet height = 0;\r\n\t\t//round or square\r\n\t\tif ((<RoundObject>gameObject).size) {\r\n\t\t\tsize = (<RoundObject>gameObject).size * this.resolutionAdjustment;\r\n\t\t\twidth = size;\r\n\t\t\theight = size;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//rect\r\n\t\t\twidth = (<RectObject>gameObject).width * this.resolutionAdjustment;\r\n\t\t\theight = (<RectObject>gameObject).height * this.resolutionAdjustment;\r\n\t\t}\r\n\t\t//animate shift\r\n\t\tlet animateShiftX = 0;\r\n\t\tlet animateShiftY = 0;\r\n\t\tif (gameObject instanceof RoundObstacle) {\r\n\t\t\tconst animateShift = gameObject.animate();\r\n\t\t\tanimateShiftX = animateShift.x;\r\n\t\t\tanimateShiftY = animateShift.y;\r\n\t\t}\r\n\t\t//positions on screen\r\n\t\tconst x =\r\n\t\t\tthis.screenCenterX + (gameObject.x + animateShiftX - this.player.getCenterX()) * this.resolutionAdjustment;\r\n\t\tconst y =\r\n\t\t\tthis.screenCenterY + (gameObject.y + animateShiftY - this.player.getCenterY()) * this.resolutionAdjustment;\r\n\t\t//Is is on the screen?\r\n\t\tlet isOnScreen = true;\r\n\t\tif (x > this.canvas.width || x < -width || y > this.canvas.height || y < -height) {\r\n\t\t\tisOnScreen = false;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tx,\r\n\t\t\ty,\r\n\t\t\tsize,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tisOnScreen\r\n\t\t};\r\n\t}\r\n}\r\n","import Map from './Map';\r\nimport Point from './Point';\r\n\r\nexport default class Hand {\r\n\treadonly size: number = 40;\r\n\tprivate x: number = 0;\r\n\tprivate y: number = 0;\r\n\tprivate radius: number = this.size / 2;\r\n\tprivate playerRadius: number;\r\n\tprivate shiftAngle: number = 40;\r\n\tprivate hitTimer: number = 0;\r\n\tprivate inAction: boolean = false;\r\n\treadonly collisionPoints: Point[] = [];\r\n\r\n\tconstructor(playerSize: number) {\r\n\t\tthis.playerRadius = playerSize / 2;\r\n\t\tthis.calculateCollisionsPoints();\r\n\t}\r\n\r\n\tprivate calculateCollisionsPoints(): void {\r\n\t\tfor (let i = 0; i < 360; i += 20) {\r\n\t\t\t//triangle\r\n\t\t\tconst x = Math.sin(i * Math.PI / 180) * this.radius;\r\n\t\t\tconst y = Math.cos(i * Math.PI / 180) * this.radius;\r\n\t\t\tthis.collisionPoints.push(new Point(x, y));\r\n\t\t}\r\n\t}\r\n\r\n\tready(): boolean {\r\n\t\treturn this.hitTimer === 0;\r\n\t}\r\n\r\n\tgetCenterX(): number {\r\n\t\treturn this.x + this.radius;\r\n\t}\r\n\r\n\tgetCenterY(): number {\r\n\t\treturn this.y + this.radius;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tmoveHand(\r\n\t\tplayerAngle: number,\r\n\t\tdirection: number,\r\n\t\tplayerSize: number,\r\n\t\tplayerX: number,\r\n\t\tplayerY: number,\r\n\t\tmap: Map\r\n\t): void {\r\n\t\tlet shiftAngle = this.shiftAngle;\r\n\t\tlet playerRadius = this.playerRadius;\r\n\t\t//hit move\r\n\t\tif (this.hitTimer > 0) {\r\n\t\t\tswitch (this.hitTimer) {\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tshiftAngle -= 4;\r\n\t\t\t\t\tplayerRadius += 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 19:\r\n\t\t\t\t\tshiftAngle -= 8;\r\n\t\t\t\t\tplayerRadius += 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tshiftAngle -= 12;\r\n\t\t\t\t\tplayerRadius += 6;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tshiftAngle -= 16;\r\n\t\t\t\t\tplayerRadius += 8;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tshiftAngle -= 20;\r\n\t\t\t\t\tplayerRadius += 10;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tshiftAngle -= 24;\r\n\t\t\t\t\tplayerRadius += 12;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tshiftAngle -= 28;\r\n\t\t\t\t\tplayerRadius += 14;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tshiftAngle -= 32;\r\n\t\t\t\t\tplayerRadius += 16;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tshiftAngle -= 36;\r\n\t\t\t\t\tplayerRadius += 18;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tshiftAngle -= 40;\r\n\t\t\t\t\tplayerRadius += 20;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tshiftAngle -= 36;\r\n\t\t\t\t\tplayerRadius += 18;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 9:\r\n\t\t\t\t\tshiftAngle -= 32;\r\n\t\t\t\t\tplayerRadius += 16;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tshiftAngle -= 28;\r\n\t\t\t\t\tplayerRadius += 14;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tshiftAngle -= 24;\r\n\t\t\t\t\tplayerRadius += 12;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tshiftAngle -= 20;\r\n\t\t\t\t\tplayerRadius += 10;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tshiftAngle -= 16;\r\n\t\t\t\t\tplayerRadius += 8;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tshiftAngle -= 12;\r\n\t\t\t\t\tplayerRadius += 6;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tshiftAngle -= 8;\r\n\t\t\t\t\tplayerRadius += 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tshiftAngle -= 4;\r\n\t\t\t\t\tplayerRadius += 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tshiftAngle -= 0;\r\n\t\t\t\t\tplayerRadius += 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t//hit?\r\n\t\t\tif (this.inAction) {\r\n\t\t\t\tfor (let i = 0; i < map.bushes.length; i++) {\r\n\t\t\t\t\tconst obstacle = map.bushes[i];\r\n\t\t\t\t\tif (obstacle.isActive()) {\r\n\t\t\t\t\t\tconst obstacleAndHandRadius = obstacle.radius + this.radius;\r\n\t\t\t\t\t\tconst x = this.getCenterX() - obstacle.getCenterX();\r\n\t\t\t\t\t\tconst y = this.getCenterY() - obstacle.getCenterY();\r\n\t\t\t\t\t\tconst distance = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\tif (distance < obstacleAndHandRadius) {\r\n\t\t\t\t\t\t\tobstacle.acceptHit(new Point(this.getCenterX(), this.getCenterY()));\r\n\t\t\t\t\t\t\tthis.inAction = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.inAction) {\r\n\t\t\t\tfor (let i = 0; i < map.rocks.length; i++) {\r\n\t\t\t\t\tconst obstacle = map.rocks[i];\r\n\t\t\t\t\tif (obstacle.isActive()) {\r\n\t\t\t\t\t\tconst obstacleAndHandRadius = obstacle.radius + this.radius;\r\n\t\t\t\t\t\tconst x = this.getCenterX() - obstacle.getCenterX();\r\n\t\t\t\t\t\tconst y = this.getCenterY() - obstacle.getCenterY();\r\n\t\t\t\t\t\tconst distance = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\tif (distance < obstacleAndHandRadius) {\r\n\t\t\t\t\t\t\tobstacle.acceptHit(new Point(this.getCenterX(), this.getCenterY()));\r\n\t\t\t\t\t\t\tthis.inAction = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.inAction) {\r\n\t\t\t\tfor (let i = 0; i < map.trees.length; i++) {\r\n\t\t\t\t\tconst obstacle = map.trees[i];\r\n\t\t\t\t\tif (obstacle.isActive()) {\r\n\t\t\t\t\t\tconst obstacleAndHandRadius = obstacle.radius + this.radius;\r\n\t\t\t\t\t\tconst x = this.getCenterX() - obstacle.getCenterX();\r\n\t\t\t\t\t\tconst y = this.getCenterY() - obstacle.getCenterY();\r\n\t\t\t\t\t\tconst distance = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\tif (distance < obstacleAndHandRadius) {\r\n\t\t\t\t\t\t\tobstacle.acceptHit(new Point(this.getCenterX(), this.getCenterY()));\r\n\t\t\t\t\t\t\tthis.inAction = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//walls\r\n\t\t\tif (this.inAction) {\r\n\t\t\t\tfor (let i = 0; i < map.rectangleObstacles.length; i++) {\r\n\t\t\t\t\tconst obstacle = map.rectangleObstacles[i];\r\n\t\t\t\t\tif (obstacle.isActive()) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.x <= obstacle.x + obstacle.width &&\r\n\t\t\t\t\t\t\tthis.x + this.size >= obstacle.x &&\r\n\t\t\t\t\t\t\tthis.y <= obstacle.y + obstacle.height &&\r\n\t\t\t\t\t\t\tthis.y + this.size >= obstacle.y\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tfor (let j = 0; j < this.collisionPoints.length; j++) {\r\n\t\t\t\t\t\t\t\tconst point = this.collisionPoints[j];\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tobstacle.isPointIn(\r\n\t\t\t\t\t\t\t\t\t\tnew Point(this.getCenterX() + point.x, this.getCenterY() + point.y)\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tobstacle.acceptHit();\r\n\t\t\t\t\t\t\t\t\tthis.inAction = false;\r\n\t\t\t\t\t\t\t\t\tconsole.log('hit');\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.hitTimer--;\r\n\t\t}\r\n\r\n\t\tlet playerAngleForHand = playerAngle + shiftAngle * direction;\r\n\t\t//0 - 359...\r\n\t\tif (playerAngleForHand < 0) playerAngleForHand = 359 + playerAngleForHand;\r\n\t\tif (playerAngleForHand > 359) playerAngleForHand = playerAngleForHand - 359;\r\n\t\t//triangle\r\n\t\tconst x = Math.sin(playerAngleForHand * Math.PI / 180) * playerRadius;\r\n\t\tconst y = Math.cos(playerAngleForHand * Math.PI / 180) * playerRadius;\r\n\t\t//set final position from center\r\n\t\tthis.x = playerX + playerSize / 2 + x - this.size / 2;\r\n\t\tthis.y = playerY + playerSize / 2 - y - this.size / 2;\r\n\t}\r\n\r\n\thit(): void {\r\n\t\tthis.hitTimer = 20;\r\n\t\tthis.inAction = true;\r\n\t}\r\n}\r\n","export default class Gun {\r\n    readonly size: number = 70;\r\n    readonly range: number;\r\n\treadonly playerRadius: number;\r\n\tprivate x: number = 0;\r\n\tprivate y: number = 0;\r\n\tprivate angle: number = 0;\r\n\r\n\tconstructor(playerSize: number, range: number) {\r\n        this.playerRadius = playerSize / 2;\r\n        this.range = range;\r\n\t}\r\n\r\n\tmove(playerAngle: number, playerCenterX: number, playerCenterY: number): void {\r\n\t\tthis.angle = playerAngle;\r\n\t\t//triangle\r\n\t\tconst x = Math.sin(this.angle * Math.PI / 180) * this.playerRadius;\r\n\t\tconst y = Math.cos(this.angle * Math.PI / 180) * this.playerRadius;\r\n\t\t//set final position from center\r\n\t\tthis.x = playerCenterX + x - this.size / 2;\r\n\t\tthis.y = playerCenterY - y - this.size / 2;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tgetAngle(): number {\r\n\t\treturn this.angle;\r\n\t}\r\n\r\n\tready(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n","import RoundObstacle from './RoundObstacle';\r\n\r\nexport default class Tree extends RoundObstacle {\r\n\treadonly treeTrankRadius: number;\r\n\r\n\tconstructor(x: number, y: number) {\r\n\t\tconst size = 200;\r\n\t\tsuper(x, y, size);\r\n\t\tthis.treeTrankRadius = 35;\r\n\t\tthis.opacity = 0.9;\r\n\t}\r\n}\r\n","import Hand from './Hand';\r\nimport Gun from './Gun';\r\nimport Map from './Map';\r\nimport Point from './Point';\r\nimport Tree from './Tree';\r\nimport RoundObstacle from './RoundObstacle';\r\nimport RectangleObstacle from './RectangleObstacle';\r\nimport { TerrainType } from './Terrain';\r\n\r\ntype Loading = {\r\n\ttime: number;\r\n\tmax: number;\r\n};\r\n\r\nexport default class Player {\r\n\treadonly size: number = 80;\r\n\treadonly radius: number = this.size / 2;\r\n\treadonly speed: number = 6;\r\n\tprivate x: number;\r\n\tprivate y: number;\r\n\tprivate angle: number = 0;\r\n\tprivate map: Map;\r\n\thands: Hand[] = [];\r\n\tgun: Gun;\r\n\tprivate canvas: HTMLCanvasElement;\r\n\treadonly collisionPoints: Point[] = [];\r\n\tprivate slowAroundObstacle: boolean = false;\r\n\tprivate loadingTime: number = 0;\r\n\tprivate loadingMaxTime: number = 3 * 60;\r\n\r\n\tconstructor(map: Map) {\r\n\t\tthis.x = 550;\r\n\t\tthis.y = 700;\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById('gameScreen');\r\n\t\tthis.hands.push(new Hand(this.size));\r\n\t\tthis.hands.push(new Hand(this.size));\r\n\t\tthis.gun = new Gun(this.size, 20);\r\n\t\tthis.map = map;\r\n\t\tthis.calculateCollisionsPoints();\r\n\t}\r\n\r\n\tprivate calculateCollisionsPoints(): void {\r\n\t\tfor (let i = 0; i < 360; i += 10) {\r\n\t\t\t//triangle\r\n\t\t\tconst x = Math.sin(i * Math.PI / 180) * this.radius;\r\n\t\t\tconst y = Math.cos(i * Math.PI / 180) * this.radius;\r\n\t\t\tthis.collisionPoints.push(new Point(x, y));\r\n\t\t}\r\n\t}\r\n\r\n\tloading(): Loading {\r\n\t\tif (this.loadingTime < this.loadingMaxTime) this.loadingTime++;\r\n\t\treturn { time: this.loadingTime, max: this.loadingMaxTime };\r\n\t}\r\n\r\n\tgetCenterX(): number {\r\n\t\treturn this.x + this.radius;\r\n\t}\r\n\r\n\tgetCenterY(): number {\r\n\t\treturn this.y + this.radius;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tgetAngle(): number {\r\n\t\treturn this.angle;\r\n\t}\r\n\r\n\tsetAngle(angle: number): void {\r\n\t\tthis.angle = angle;\r\n\t}\r\n\r\n\thit(): void {\r\n\t\tif (this.hands[0].ready() && this.hands[1].ready()) {\r\n\t\t\tlet random = Math.round(Math.random());\r\n\t\t\tthis.hands[random].hit();\r\n\t\t}\r\n\t}\r\n\r\n\tplayerMove(up: boolean, left: boolean, down: boolean, right: boolean, mouseX: number, mouseY: number): void {\r\n\t\tif (up || down || left || right) {\r\n\t\t\t//standart shift (speed)\r\n\t\t\tlet shift = this.speed;\r\n\r\n\t\t\t//diagonal shift and slow around obstacle\r\n\t\t\tif ((up && left) || (up && right) || (down && left) || (down && right) || this.slowAroundObstacle) {\r\n\t\t\t\tshift = shift / Math.sqrt(2);\r\n\t\t\t\tthis.slowAroundObstacle = false;\r\n\t\t\t}\r\n\r\n\t\t\t//shift in water\r\n\t\t\tfor (let i = 0; i < this.map.terrain.length; i++) {\r\n\t\t\t\t//terrain block is under my center\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.getCenterX() < this.map.terrain[i].x + this.map.terrain[i].width &&\r\n\t\t\t\t\tthis.getCenterX() >= this.map.terrain[i].x &&\r\n\t\t\t\t\tthis.getCenterY() < this.map.terrain[i].y + this.map.terrain[i].height &&\r\n\t\t\t\t\tthis.getCenterY() >= this.map.terrain[i].y\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (this.map.terrain[i].type === TerrainType.Water) {\r\n\t\t\t\t\t\tshift = shift / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.map.terrain[i].type === TerrainType.WaterTriangle1 ||\r\n\t\t\t\t\t\tthis.map.terrain[i].type === TerrainType.WaterTriangle2 ||\r\n\t\t\t\t\t\tthis.map.terrain[i].type === TerrainType.WaterTriangle3 ||\r\n\t\t\t\t\t\tthis.map.terrain[i].type === TerrainType.WaterTriangle4\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t//Math.floor!!!\r\n\t\t\t\t\t\tconst myXPositionOnTerrain = Math.floor(this.getCenterX() - this.map.terrain[i].x);\r\n\t\t\t\t\t\tconst myYPositionOnTerrain = Math.floor(this.getCenterY() - this.map.terrain[i].y);\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.map.waterTerrainData.includeWater(\r\n\t\t\t\t\t\t\t\tthis.map.terrain[i].type,\r\n\t\t\t\t\t\t\t\tmyXPositionOnTerrain,\r\n\t\t\t\t\t\t\t\tmyYPositionOnTerrain\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tshift = shift / 2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//player shift\r\n\t\t\tlet shiftX = 0;\r\n\t\t\tlet shiftY = 0;\r\n\t\t\tif (up) shiftY += -shift;\r\n\t\t\tif (down) shiftY += shift;\r\n\t\t\tif (left) shiftX += -shift;\r\n\t\t\tif (right) shiftX += shift;\r\n\t\t\t//i want to go this way...\r\n\t\t\tthis.shiftOnPosition(shiftX, shiftY);\r\n\t\t}\r\n\t\tthis.rotatePlayer(mouseX, mouseY);\r\n\t\tthis.gun.move(this.angle, this.getCenterX(), this.getCenterY());\r\n\t\tthis.changeHandsPosition();\r\n\t}\r\n\r\n\tprivate changeHandsPosition(): void {\r\n\t\tthis.hands[0].moveHand(this.angle, -1, this.size, this.x, this.y, this.map);\r\n\t\tthis.hands[1].moveHand(this.angle, 1, this.size, this.x, this.y, this.map);\r\n\t}\r\n\r\n\tprivate shiftOnPosition(shiftX: number, shiftY: number): void {\r\n\t\t//one or two shifts?\r\n\t\tlet countShifts = 0;\r\n\t\tif (shiftX !== 0) countShifts++;\r\n\t\tif (shiftY !== 0) countShifts++;\r\n\r\n\t\t//y shift\r\n\t\tlet shiftDirection = 1;\r\n\t\tif (shiftY < 0) shiftDirection = -1;\r\n\t\tfor (let i = 0; i < Math.abs(shiftY); i++) {\r\n\t\t\tif (this.canIshift(0, shiftY - i * shiftDirection, countShifts)) {\r\n\t\t\t\tthis.y += shiftY - i * shiftDirection;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//x shift\r\n\t\tshiftDirection = 1;\r\n\t\tif (shiftX < 0) shiftDirection = -1;\r\n\t\tfor (let i = 0; i < Math.abs(shiftX); i++) {\r\n\t\t\tif (this.canIshift(shiftX - i * shiftDirection, 0, countShifts)) {\r\n\t\t\t\tthis.x += shiftX - i * shiftDirection;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//move only on map area\r\n\t\tif (this.x + this.size > this.map.width) this.x = this.map.width - this.size;\r\n\t\tif (this.x < 0) this.x = 0;\r\n\t\tif (this.y + this.size > this.map.height) this.y = this.map.height - this.size;\r\n\t\tif (this.y < 0) this.y = 0;\r\n\t}\r\n\r\n\tprivate canIshift(shiftX: number, shiftY: number, countShifts: number): boolean {\r\n\t\t//rectangles\r\n\t\tfor (let i = 0; i < this.map.rectangleObstacles.length; i++) {\r\n\t\t\tconst rectangleObstacle = this.map.rectangleObstacles[i];\r\n\t\t\tif (rectangleObstacle.isActive()) {\r\n\t\t\t\t//collision rectangle - rectangle\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.x + shiftX + this.size >= rectangleObstacle.x &&\r\n\t\t\t\t\tthis.x + shiftX <= rectangleObstacle.x + rectangleObstacle.width &&\r\n\t\t\t\t\tthis.y + shiftY <= rectangleObstacle.y + rectangleObstacle.height &&\r\n\t\t\t\t\tthis.y + shiftY + this.size >= rectangleObstacle.y\r\n\t\t\t\t) {\r\n\t\t\t\t\tfor (let j = 0; j < this.collisionPoints.length; j++) {\r\n\t\t\t\t\t\tconst point = this.collisionPoints[j];\r\n\t\t\t\t\t\tconst pointOnMyPosition = new Point(\r\n\t\t\t\t\t\t\tthis.getCenterX() + shiftX + point.x,\r\n\t\t\t\t\t\t\tthis.getCenterY() + shiftY + point.y\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//point collisions\r\n\t\t\t\t\t\tif (rectangleObstacle.isPointIn(pointOnMyPosition)) {\r\n\t\t\t\t\t\t\tthis.goAroundRectangleObstacle(shiftX, shiftY, countShifts, rectangleObstacle);\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//rounds\r\n\t\tfor (let i = 0; i < this.map.impassableRoundObstacles.length; i++) {\r\n\t\t\tconst roundObstacle = this.map.impassableRoundObstacles[i];\r\n\t\t\tif (roundObstacle.isActive()) {\r\n\t\t\t\tlet obstacleRadius = roundObstacle.radius;\r\n\t\t\t\tif (roundObstacle instanceof Tree) obstacleRadius = roundObstacle.treeTrankRadius;\r\n\t\t\t\tconst obstacleAndPlayerRadius = obstacleRadius + this.radius;\r\n\t\t\t\tconst x = this.getCenterX() + shiftX - roundObstacle.getCenterX();\r\n\t\t\t\tconst y = this.getCenterY() + shiftY - roundObstacle.getCenterY();\r\n\t\t\t\tconst distance = Math.sqrt(x * x + y * y);\r\n\t\t\t\tif (distance < obstacleAndPlayerRadius) {\r\n\t\t\t\t\tthis.goAroundRoundObstacle(shiftX, shiftY, countShifts, roundObstacle);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate goAroundRectangleObstacle(\r\n\t\tshiftX: number,\r\n\t\tshiftY: number,\r\n\t\tcountShifts: number,\r\n\t\trectangleObstacle: RectangleObstacle\r\n\t): void {\r\n\t\tthis.slowAroundObstacle = true;\r\n\t\tconst maxObstacleOverlap = this.size * 0.75;\r\n\t\tif (countShifts === 1) {\r\n\t\t\tif (shiftX !== 0) {\r\n\t\t\t\t//up or down?\r\n\t\t\t\t//go up\r\n\t\t\t\tif (this.getCenterY() <= rectangleObstacle.y + rectangleObstacle.height / 2) {\r\n\t\t\t\t\tif (this.y + this.size - rectangleObstacle.y < maxObstacleOverlap) this.shiftOnPosition(0, -1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//go down\r\n\t\t\t\t\tif (rectangleObstacle.y + rectangleObstacle.height - this.y < maxObstacleOverlap)\r\n\t\t\t\t\t\tthis.shiftOnPosition(0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (shiftY !== 0) {\r\n\t\t\t\t//left or right?\r\n\t\t\t\t//go left\r\n\t\t\t\tif (this.getCenterX() <= rectangleObstacle.x + rectangleObstacle.width / 2) {\r\n\t\t\t\t\tif (this.x + this.size - rectangleObstacle.x < maxObstacleOverlap) this.shiftOnPosition(-1, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//go right\r\n\t\t\t\t\tif (rectangleObstacle.x + rectangleObstacle.width - this.x < maxObstacleOverlap)\r\n\t\t\t\t\t\tthis.shiftOnPosition(1, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (countShifts === 2) {\r\n\t\t\tthis.slowAroundObstacle = false;\r\n\t\t\t//chose way\r\n\t\t\t//obstacle is up and right\r\n\t\t\tif (\r\n\t\t\t\tthis.getCenterX() < rectangleObstacle.x + rectangleObstacle.width / 2 &&\r\n\t\t\t\tthis.getCenterY() > rectangleObstacle.y + rectangleObstacle.height / 2\r\n\t\t\t) {\r\n\t\t\t\tconst xDistanceFromCorner = Math.abs(this.getCenterX() - rectangleObstacle.x);\r\n\t\t\t\tconst yDistanceFromCorner = Math.abs(\r\n\t\t\t\t\tthis.getCenterY() - (rectangleObstacle.y + rectangleObstacle.height)\r\n\t\t\t\t);\r\n\t\t\t\t//x shift right\r\n\t\t\t\tif (xDistanceFromCorner <= yDistanceFromCorner) {\r\n\t\t\t\t\tthis.shiftOnPosition(0.1, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//y shift up\r\n\t\t\t\t\tthis.shiftOnPosition(0, -0.1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (\r\n\t\t\t\tthis.getCenterX() > rectangleObstacle.x + rectangleObstacle.width / 2 &&\r\n\t\t\t\tthis.getCenterY() > rectangleObstacle.y + rectangleObstacle.height / 2\r\n\t\t\t) {\r\n\t\t\t\t//obstacle is up and left\r\n\t\t\t\tconst xDistanceFromCorner = Math.abs(\r\n\t\t\t\t\tthis.getCenterX() - (rectangleObstacle.x + rectangleObstacle.width)\r\n\t\t\t\t);\r\n\t\t\t\tconst yDistanceFromCorner = Math.abs(\r\n\t\t\t\t\tthis.getCenterY() - (rectangleObstacle.y + rectangleObstacle.height)\r\n\t\t\t\t);\r\n\t\t\t\t//x shift left\r\n\t\t\t\tif (xDistanceFromCorner <= yDistanceFromCorner) {\r\n\t\t\t\t\tthis.shiftOnPosition(-0.1, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//y shift up\r\n\t\t\t\t\tthis.shiftOnPosition(0, -0.1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (\r\n\t\t\t\tthis.getCenterX() > rectangleObstacle.x + rectangleObstacle.width / 2 &&\r\n\t\t\t\tthis.getCenterY() < rectangleObstacle.y + rectangleObstacle.height / 2\r\n\t\t\t) {\r\n\t\t\t\t//obstacle is down and left\r\n\t\t\t\tconst xDistanceFromCorner = Math.abs(\r\n\t\t\t\t\tthis.getCenterX() - (rectangleObstacle.x + rectangleObstacle.width)\r\n\t\t\t\t);\r\n\t\t\t\tconst yDistanceFromCorner = Math.abs(this.getCenterY() - rectangleObstacle.y);\r\n\t\t\t\t//x shift left\r\n\t\t\t\tif (xDistanceFromCorner <= yDistanceFromCorner) {\r\n\t\t\t\t\tthis.shiftOnPosition(-0.1, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//y shift down\r\n\t\t\t\t\tthis.shiftOnPosition(0, 0.1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (\r\n\t\t\t\tthis.getCenterX() < rectangleObstacle.x + rectangleObstacle.width / 2 &&\r\n\t\t\t\tthis.getCenterY() < rectangleObstacle.y + rectangleObstacle.height / 2\r\n\t\t\t) {\r\n\t\t\t\t//obstacle is down and right\r\n\t\t\t\tconst xDistanceFromCorner = Math.abs(this.getCenterX() - rectangleObstacle.x);\r\n\t\t\t\tconst yDistanceFromCorner = Math.abs(this.getCenterY() - rectangleObstacle.y);\r\n\t\t\t\t//x shift right\r\n\t\t\t\tif (xDistanceFromCorner <= yDistanceFromCorner) {\r\n\t\t\t\t\tthis.shiftOnPosition(0.1, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//y shift down\r\n\t\t\t\t\tthis.shiftOnPosition(0, 0.1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate goAroundRoundObstacle(\r\n\t\tshiftX: number,\r\n\t\tshiftY: number,\r\n\t\tcountShifts: number,\r\n\t\troundObstacle: RoundObstacle\r\n\t): void {\r\n\t\tthis.slowAroundObstacle = true;\r\n\t\tif (countShifts === 1) {\r\n\t\t\tif (shiftX !== 0) {\r\n\t\t\t\t//obstacle above\r\n\t\t\t\tif (this.getCenterY() >= roundObstacle.getCenterY()) {\r\n\t\t\t\t\t//go down\r\n\t\t\t\t\tthis.shiftOnPosition(0, 1);\r\n\t\t\t\t}\r\n\t\t\t\t//obstacle below\r\n\t\t\t\tif (this.getCenterY() < roundObstacle.getCenterY()) {\r\n\t\t\t\t\t//go up\r\n\t\t\t\t\tthis.shiftOnPosition(0, -1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (shiftY !== 0) {\r\n\t\t\t\t//obstacle on left\r\n\t\t\t\tif (this.getCenterX() >= roundObstacle.getCenterX()) {\r\n\t\t\t\t\t//go right\r\n\t\t\t\t\tthis.shiftOnPosition(1, 0);\r\n\t\t\t\t}\r\n\t\t\t\t//obstacle on right\r\n\t\t\t\tif (this.getCenterX() < roundObstacle.getCenterX()) {\r\n\t\t\t\t\t//go left\r\n\t\t\t\t\tthis.shiftOnPosition(-1, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (countShifts === 2) {\r\n\t\t\t//choose shorter way\r\n\t\t\tconst xDistance = Math.abs(this.getCenterX() - roundObstacle.getCenterX());\r\n\t\t\tconst yDistance = Math.abs(this.getCenterY() - roundObstacle.getCenterY());\r\n\r\n\t\t\t//x shift\r\n\t\t\tif (xDistance <= yDistance) {\r\n\t\t\t\t//obstacle on right\r\n\t\t\t\tif (this.getCenterX() <= roundObstacle.getCenterX()) {\r\n\t\t\t\t\t//go right\r\n\t\t\t\t\tthis.shiftOnPosition(0.5, 0);\r\n\t\t\t\t}\r\n\t\t\t\t//obstacle on left\r\n\t\t\t\tif (this.getCenterX() > roundObstacle.getCenterX()) {\r\n\t\t\t\t\t//go left\r\n\t\t\t\t\tthis.shiftOnPosition(-0.5, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//y shift\r\n\t\t\t\t//obstacle below\r\n\t\t\t\tif (this.getCenterY() <= roundObstacle.getCenterY()) {\r\n\t\t\t\t\t//go down\r\n\t\t\t\t\tthis.shiftOnPosition(0, 0.5);\r\n\t\t\t\t}\r\n\t\t\t\t//obstacle above\r\n\t\t\t\tif (this.getCenterY() > roundObstacle.getCenterY()) {\r\n\t\t\t\t\t//go up\r\n\t\t\t\t\tthis.shiftOnPosition(0, -0.5);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate rotatePlayer(mouseX: number, mouseY: number): void {\r\n\t\t//triangular sides\r\n\t\tconst centerX = this.canvas.width / 2;\r\n\t\tconst centerY = this.canvas.height / 2;\r\n\t\tlet x = centerX - mouseX;\r\n\t\tlet y = centerY - mouseY;\r\n\t\t//can not set x and y to 0 because angle\r\n\t\tif (x === 0) x = 0.1;\r\n\t\t//atangens\r\n\t\tlet angle = Math.abs(Math.atan(x / y) * 180 / Math.PI);\r\n\t\t//1..2..3..4.. Q; 0 - 90, 90 - 180...\r\n\t\t//1\r\n\t\tif (mouseX >= centerX && mouseY < centerY) {\r\n\t\t\tthis.angle = angle;\r\n\t\t}\r\n\t\t//2\r\n\t\tif (mouseX >= centerX && mouseY >= centerY) {\r\n\t\t\tthis.angle = 90 + 90 - angle;\r\n\t\t}\r\n\t\t//3\r\n\t\tif (mouseX < centerX && mouseY >= centerY) {\r\n\t\t\tthis.angle = 180 + angle;\r\n\t\t}\r\n\t\t//4\r\n\t\tif (mouseX < centerX && mouseY < centerY) {\r\n\t\t\tthis.angle = 270 + 90 - angle;\r\n\t\t}\r\n\t\tthis.angle = Math.round(this.angle);\r\n\t\tif (this.angle === 360) this.angle = 0;\r\n\t}\r\n}\r\n","import RoundObstacle from './RoundObstacle';\r\n\r\nexport default class Bush extends RoundObstacle {\r\n\tconstructor(x: number, y: number) {\r\n\t\tconst size = 100;\r\n\t\tsuper(x, y, size);\r\n\t\tthis.opacity = 0.9;\r\n\t}\r\n}\r\n","import RoundObstacle from './RoundObstacle';\r\n\r\nexport default class Rock extends RoundObstacle {\r\n\tconstructor(x: number, y: number) {\r\n\t\tconst size = 100;\r\n\t\tsuper(x, y, size);\r\n\t\tthis.opacity = 1;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default abstract class RectangleObstacle {\r\n\treadonly x: number;\r\n\treadonly y: number;\r\n\tprotected opacity: number = 1;\r\n\treadonly width: number;\r\n\treadonly height: number;\r\n\tprivate active: boolean = true;\r\n\r\n\tconstructor(x: number, y: number, width: number, height: number) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tisPointIn(point: Point): boolean {\r\n\t\tconst { x, y } = point;\r\n\t\tif (x < this.x + this.width && x >= this.x && y >= this.y && y < this.y + this.height) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetOpacity(): number {\r\n\t\treturn this.opacity;\r\n\t}\r\n\r\n\tisActive(): boolean {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\tacceptHit(): void {\r\n\t\tif (this.opacity > 0.1) this.opacity -= 0.1;\r\n\t\tif (this.opacity < 0.1) {\r\n\t\t\tthis.active = false;\r\n\t\t}\r\n\t}\r\n}\r\n","import RectangleObstacle from './RectangleObstacle';\r\n\r\nexport default class Wall extends RectangleObstacle {\r\n\tconstructor(x: number, y: number, width: number, height: number) {\r\n\t\tsuper(x, y, width, height);\r\n\t}\r\n}\r\n","import { Terrain, TerrainType } from './Terrain';\r\nimport Bush from './Bush';\r\nimport Tree from './Tree';\r\nimport Rock from './Rock';\r\nimport Wall from './Wall';\r\nimport WaterTerrainData from './WaterTerrainData';\r\nimport RoundObstacle from './RoundObstacle';\r\nimport RectangleObstacle from './RectangleObstacle';\r\n\r\ntype Block = {\r\n\tx: number;\r\n\ty: number;\r\n};\r\n\r\nexport default class Map {\r\n\treadonly width: number;\r\n\treadonly height: number;\r\n\treadonly blocks: Block[] = [];\r\n\treadonly terrain: Terrain[] = [];\r\n\treadonly impassableRoundObstacles: RoundObstacle[] = [];\r\n\treadonly bushes: Bush[] = [];\r\n\treadonly trees: Tree[] = [];\r\n\treadonly rocks: Rock[] = [];\r\n\treadonly rectangleObstacles: RectangleObstacle[] = [];\r\n\treadonly waterTerrainData: WaterTerrainData;\r\n\r\n\tconstructor(waterTerrainData: WaterTerrainData) {\r\n\t\tthis.waterTerrainData = waterTerrainData;\r\n\t\tconst blockSize = 300;\r\n\t\tthis.width = 5 * blockSize;\r\n\t\tthis.height = 5 * blockSize;\r\n\t\t//Create blocks\r\n\t\tfor (let yy = 0; yy < this.height / blockSize; yy++) {\r\n\t\t\tfor (let xx = 0; xx < this.width / blockSize; xx++) {\r\n\t\t\t\tthis.blocks.push({ x: xx * blockSize, y: yy * blockSize });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//terrain\r\n\t\tthis.terrain.push(new Terrain(TerrainType.Water, 0, 0, this.width, blockSize));\r\n\t\tthis.terrain.push(new Terrain(TerrainType.Water, 0, this.height - blockSize, this.width, blockSize));\r\n\t\tthis.terrain.push(new Terrain(TerrainType.Water, 0, blockSize, blockSize, this.height - 2 * blockSize));\r\n\t\tthis.terrain.push(\r\n\t\t\tnew Terrain(TerrainType.Water, this.width - blockSize, blockSize, blockSize, this.height - 2 * blockSize)\r\n\t\t);\r\n\r\n\t\t//water trangle\r\n\t\tthis.terrain.push(new Terrain(TerrainType.WaterTriangle1, blockSize, blockSize, blockSize, blockSize));\r\n\t\tthis.terrain.push(new Terrain(TerrainType.WaterTriangle2, 3 * blockSize, blockSize, blockSize, blockSize));\r\n\t\tthis.terrain.push(new Terrain(TerrainType.WaterTriangle3, 3 * blockSize, 3 * blockSize, blockSize, blockSize));\r\n\t\tthis.terrain.push(new Terrain(TerrainType.WaterTriangle4, blockSize, 3 * blockSize, blockSize, blockSize));\r\n\r\n\t\t//bushes\r\n\t\tthis.bushes.push(new Bush(600, 600));\r\n\t\tthis.bushes.push(new Bush(300, 400));\r\n\r\n\t\t//rocks\r\n\t\tconst rock = new Rock(100, 100);\r\n\t\tthis.rocks.push(rock);\r\n\t\tthis.impassableRoundObstacles.push(rock);\r\n\r\n\t\tconst rock2 = new Rock(550, 550);\r\n\t\tthis.rocks.push(rock2);\r\n\t\tthis.impassableRoundObstacles.push(rock2);\r\n\r\n\t\tconst rock3 = new Rock(700, 550);\r\n\t\tthis.rocks.push(rock3);\r\n\t\tthis.impassableRoundObstacles.push(rock3);\r\n\r\n\t\t//this.rocks[0].isPointIn(new Point(120, 120));\r\n\r\n\t\t//trees\r\n\t\tconst tree = new Tree(800, 800);\r\n\t\tthis.trees.push(tree);\r\n\t\tthis.impassableRoundObstacles.push(tree);\r\n\r\n\t\tconst tree2 = new Tree(0, 0);\r\n\t\tthis.trees.push(tree2);\r\n\t\tthis.impassableRoundObstacles.push(tree2);\r\n\r\n\t\t//walls\r\n\t\tthis.rectangleObstacles.push(new Wall(600, 800, 20, 200));\r\n\t\tthis.rectangleObstacles.push(new Wall(500, 900, 200, 20));\r\n\t\tthis.rectangleObstacles.push(new Wall(500, 350, 300, 100));\r\n\t}\r\n}\r\n","import { TerrainType } from './Terrain';\r\n\r\n/*\r\nimport { triangel1 } from './triangel1Data';\r\nimport { triangel2 } from './triangel2Data';\r\nimport { triangel3 } from './triangel3Data';\r\nimport { triangel4 } from './triangel4Data';\r\n*/\r\n\r\nexport default class WaterTerrainData {\r\n\tprivate waterTriangle1: boolean[][] = [];\r\n\tprivate waterTriangle2: boolean[][] = [];\r\n\tprivate waterTriangle3: boolean[][] = [];\r\n\tprivate waterTriangle4: boolean[][] = [];\r\n\r\n\t/*\r\n\tprivate waterTriangle1: number[][] = triangel1;\r\n\tprivate waterTriangle2: number[][] = triangel2;\r\n\tprivate waterTriangle3: number[][] = triangel3;\r\n\tprivate waterTriangle4: number[][] = triangel4;\r\n\t*/\r\n\r\n\tconstructor() {}\r\n\r\n\tsetData(type: TerrainType, data: boolean[][]): void {\r\n\t\tswitch (type) {\r\n\t\t\tcase TerrainType.WaterTriangle1:\r\n\t\t\t\tthis.waterTriangle1 = data;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle2:\r\n\t\t\t\tthis.waterTriangle2 = data;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle3:\r\n\t\t\t\tthis.waterTriangle3 = data;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle4:\r\n\t\t\t\tthis.waterTriangle4 = data;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Unknown water type');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tincludeWater(type: TerrainType, x: number, y: number): boolean {\r\n\t\tlet state = false;\r\n\t\tlet waterData;\r\n\t\tswitch (type) {\r\n\t\t\tcase TerrainType.WaterTriangle1:\r\n\t\t\t\twaterData = this.waterTriangle1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle2:\r\n\t\t\t\twaterData = this.waterTriangle2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle3:\r\n\t\t\t\twaterData = this.waterTriangle3;\r\n\t\t\t\tbreak;\r\n\t\t\tcase TerrainType.WaterTriangle4:\r\n\t\t\t\twaterData = this.waterTriangle4;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Unknown water type');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif (x < waterData.length && y < waterData[x].length) {\r\n\t\t\tif (waterData[x][y]) state = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//no water data yet\r\n\t\t\t//no water data == we are in water\r\n\t\t\tif (waterData.length === 0) {\r\n\t\t\t\tstate = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow new Error('Out of range on water type');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn state;\r\n\t}\r\n\r\n\t/*\r\n\twrite(): void {\r\n\t\tconst el = document.createElement('p');\r\n\t\tel.style.position = 'absolute';\r\n\t\tel.style.top = '0';\r\n\t\tel.style.left = '0';\r\n\r\n\t\tel.textContent = JSON.stringify(this.waterTriangle4);\r\n\t\tdocument.body.appendChild(el);\r\n\t}\r\n\t*/\r\n}\r\n","import Map from './Map';\r\nimport Point from './Point';\r\n\r\nexport default class Bullet {\r\n\treadonly size: number = 5;\r\n\treadonly range: number;\r\n\tprivate x: number = 0;\r\n\tprivate y: number = 0;\r\n\tprivate angle: number = 0;\r\n\tprivate shiftX: number = 0;\r\n\tprivate shiftY: number = 0;\r\n\tprivate distance: number = 0;\r\n\tprivate active: boolean = true;\r\n\r\n\tconstructor(x: number, y: number, angle: number, range: number) {\r\n\t\tthis.x = x - this.size / 2;\r\n\t\tthis.y = y - this.size / 2;\r\n\t\tthis.angle = angle;\r\n\t\tthis.range = range;\r\n\t\t//triangle\r\n\t\tconst bulletSpeed = 30;\r\n\t\tthis.shiftX = Math.sin(angle * Math.PI / 180) * bulletSpeed;\r\n\t\tthis.shiftY = Math.cos(angle * Math.PI / 180) * bulletSpeed;\r\n\r\n\t\t//start shift\r\n\t\tconst bulletStartShift = 1.5;\r\n\t\tthis.x += this.shiftX * bulletStartShift;\r\n\t\tthis.y -= this.shiftY * bulletStartShift;\r\n\t}\r\n\r\n\tmove(map: Map): void {\r\n\t\tif(!this.collisions(map)){\r\n\t\t\tthis.x += this.shiftX;\r\n\t\t\tthis.y -= this.shiftY;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate collisions(map: Map): boolean {\r\n\t\tconst bulletPoint = new Point(this.getCenterX(), this.getCenterY());\r\n\t\t//rounds\r\n\t\tfor (const obstacle of map.impassableRoundObstacles) {\r\n\t\t\tif (obstacle.isActive() && obstacle.isPointIn(bulletPoint)) {\r\n\t\t\t\tobstacle.acceptHit(bulletPoint);\r\n\t\t\t\tthis.active = false;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//rects\r\n\t\tif (this.active) {\r\n\t\t\tfor (const obstacle of map.rectangleObstacles) {\r\n\t\t\t\tif (obstacle.isActive() && obstacle.isPointIn(bulletPoint)) {\r\n\t\t\t\t\tobstacle.acceptHit();\r\n\t\t\t\t\tthis.active = false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tgetCenterX(): number {\r\n\t\treturn this.x + this.size / 2;\r\n\t}\r\n\r\n\tgetCenterY(): number {\r\n\t\treturn this.y + this.size / 2;\r\n\t}\r\n\r\n\tgetAngle(): number {\r\n\t\treturn this.angle;\r\n\t}\r\n\r\n\tflying(): boolean {\r\n\t\tlet state = true;\r\n\t\tthis.distance++;\r\n\t\tif (this.distance > this.range) state = false;\r\n\t\tif (!this.active) state = false;\r\n\t\treturn state;\r\n\t}\r\n}\r\n","import { Keys, Mouse } from './Controller';\r\nimport Socket from './Socket';\r\nimport View from './View';\r\nimport Player from './Player';\r\nimport Map from './Map';\r\nimport WaterTerrainData from './WaterTerrainData';\r\nimport Bullet from './Bullet';\r\nimport ServerClientSync from './ServerClientSync';\r\n\r\nexport default class Model {\r\n\tprivate view: View;\r\n\tprivate player: Player;\r\n\tprivate socket: Socket;\r\n\tprivate waterTerrainData: WaterTerrainData;\r\n\tprivate keys: Keys;\r\n\tprivate mouse: Mouse;\r\n\tprivate map: Map;\r\n\tprivate bullets: Bullet[] = [];\r\n\tprivate halfFPS: boolean = true;\r\n\tprivate time = Date.now();\r\n\tprivate serverClientSync: ServerClientSync;\r\n\r\n\tconstructor(keys: Keys, mouse: Mouse, socket: Socket, serverClientSync: ServerClientSync) {\r\n\t\tthis.socket = socket;\r\n\t\tthis.serverClientSync = serverClientSync;\r\n\t\tthis.waterTerrainData = new WaterTerrainData();\r\n\t\tthis.map = new Map(this.waterTerrainData);\r\n\t\tthis.player = new Player(this.map);\r\n\t\tthis.keys = keys;\r\n\t\tthis.mouse = mouse;\r\n\t\tthis.view = new View(\r\n\t\t\tthis.map,\r\n\t\t\tthis.player,\r\n\t\t\tthis.bullets,\r\n\t\t\tthis.mouse,\r\n\t\t\tthis.waterTerrainData,\r\n\t\t\tthis.serverClientSync\r\n\t\t);\r\n\t\t//this.gameLoop();\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.gameLoop();\r\n\t\t}, 200);\r\n\t\t/*\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.gameLoop();\r\n\t\t}, 1000 / 60);\r\n\t\t*/\r\n\t}\r\n\r\n\tprivate gameLoop(): void {\r\n\t\t//repeat\r\n\t\trequestAnimationFrame(() => {\r\n\t\t\tthis.gameLoop();\r\n\t\t});\r\n\r\n\t\t//sync\r\n\t\tif (!this.serverClientSync.ready()) {\r\n\t\t\tthis.socket.emit('serverClientSync', Date.now());\r\n\t\t}\r\n\r\n\t\t//const now = Date.now();\r\n\t\t//console.log(now - this.time);\r\n\t\t//this.time = now;\r\n\r\n\t\tthis.player.playerMove(this.keys.w, this.keys.a, this.keys.s, this.keys.d, this.mouse.x, this.mouse.y);\r\n\r\n\t\t//#################################\r\n\t\t//send player Data...\r\n\t\tconst playerData = {\r\n\t\t\tx: this.player.getX(),\r\n\t\t\ty: this.player.getY()\r\n\t\t};\r\n\t\t//this.socket.emit('p', this.player.getX(), this.player.getY(), Date.now());\r\n\t\t//#################################\r\n\r\n\t\t//move and delete bullets\r\n\t\tfor (let i = this.bullets.length - 1; i >= 0; i--) {\r\n\t\t\tconst bullet = this.bullets[i];\r\n\t\t\tif (bullet.flying()) {\r\n\t\t\t\tbullet.move(this.map);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bullets.splice(i, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//hit\r\n\t\tif (this.mouse.left) {\r\n\t\t\tthis.player.hit();\r\n\t\t\tif (this.player.gun.ready()) {\r\n\t\t\t\tthis.bullets.push(\r\n\t\t\t\t\tnew Bullet(\r\n\t\t\t\t\t\tthis.player.getCenterX(),\r\n\t\t\t\t\t\tthis.player.getCenterY(),\r\n\t\t\t\t\t\tthis.player.getAngle(),\r\n\t\t\t\t\t\tthis.player.gun.range\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthis.mouse.left = false;\r\n\t\t}\r\n\t\t/*\r\n\t\tif(this.halfFPS){\r\n\t\t\tthis.view.draw();\r\n\t\t\tthis.halfFPS = false;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.halfFPS = true;\r\n\t\t}\r\n\t\t*/\r\n\t\tthis.view.draw();\r\n\t}\r\n\r\n\tscreenResize(): void {\r\n\t\tthis.view.screenResize();\r\n\t}\r\n}\r\n","export default class ServerClientSync {\r\n\tprivate ping: number | null = null;\r\n\tprivate pings: number[] = [];\r\n\tprivate timeDiference: number | null = null;\r\n\tprivate timeDiferences: number[] = [];\r\n\tprivate readonly attempts: number = 10;\r\n\tprivate readonly defaultDrawDelay: number = 50;\r\n\tprivate drawDelay: number = this.defaultDrawDelay;\r\n\r\n\tconstructor() {}\r\n\r\n\tgetPing(): number {\r\n\t\treturn this.ping;\r\n\t}\r\n\r\n\tgetTimeDiference(): number {\r\n\t\treturn this.timeDiference;\r\n\t}\r\n\r\n\tready(): boolean {\r\n\t\treturn this.ping != null && this.timeDiference != null;\r\n\t}\r\n\r\n\treset(): void {\r\n\t\tthis.ping = null;\r\n\t\tthis.pings = [];\r\n\t\tthis.timeDiference = null;\r\n\t\tthis.timeDiferences = [];\r\n\t}\r\n\r\n\taddData(ping: number, timeDiference: number): void {\r\n\t\tif (!this.ready()) {\r\n\t\t\tthis.pings.push(ping);\r\n\t\t\tthis.timeDiferences.push(timeDiference);\r\n\t\t}\r\n\t\t//count average\r\n\t\tif (this.pings.length === this.attempts) {\r\n\t\t\tlet pingsSuma = 0;\r\n\t\t\tfor (const ping of this.pings) {\r\n\t\t\t\tpingsSuma += ping;\r\n\t\t\t}\r\n\t\t\tthis.ping = pingsSuma / this.attempts;\r\n\t\t\tlet timeDiferenceSuma = 0;\r\n\t\t\tfor (const timeDiference of this.timeDiferences) {\r\n\t\t\t\ttimeDiferenceSuma += timeDiference;\r\n\t\t\t}\r\n\t\t\tthis.timeDiference = timeDiferenceSuma / this.attempts;\r\n\t\t}\r\n\t}\r\n\r\n\tchangeDrawDelay(change: number): void {\r\n\t\tthis.drawDelay += change;\r\n\t\tif (this.drawDelay < 0) this.drawDelay = 0;\r\n\t}\r\n\r\n\tgetDrawDelay(): number {\r\n\t\treturn this.drawDelay;\r\n\t}\r\n}\r\n","import Model from './Model';\r\nimport Socket from './Socket';\r\nimport ServerClientSync from './ServerClientSync';\r\n\r\n//import { io, Socket } from './socket.io.d';\r\n\r\ndeclare const io: {\r\n\tconnect(url: string): Socket;\r\n};\r\n\r\nexport type Keys = {\r\n\tw: boolean;\r\n\ta: boolean;\r\n\ts: boolean;\r\n\td: boolean;\r\n};\r\n\r\nexport type Mouse = {\r\n\tx: number;\r\n\ty: number;\r\n\tleft: boolean;\r\n\tmiddle: boolean;\r\n\tright: boolean;\r\n};\r\n\r\nexport class Controller {\r\n\tprivate static instance: Controller;\r\n\tprivate model: Model;\r\n\tprivate socket: Socket;\r\n\tprivate serverClientSync: ServerClientSync;\r\n\tstatic _socket: Socket;\r\n\tprivate canvas: HTMLCanvasElement;\r\n\tprivate keys: Keys = {\r\n\t\tw: false,\r\n\t\ta: false,\r\n\t\ts: false,\r\n\t\td: false\r\n\t};\r\n\tprivate mouse: Mouse = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tleft: false,\r\n\t\tmiddle: false,\r\n\t\tright: false\r\n\t};\r\n\r\n\tstatic playerData: any[] = [];\r\n\tstatic timeDiference: number;\r\n\r\n\tprivate constructor() {\r\n\t\tthis.canvas = document.getElementsByTagName('canvas')[0];\r\n\t\tthis.socket = io.connect('http://192.168.0.2:8888');\r\n\t\tthis.serverClientSync = new ServerClientSync();\r\n\t\tController._socket = this.socket;\r\n\t\tthis.model = new Model(this.keys, this.mouse, this.socket, this.serverClientSync);\r\n\t\twindow.addEventListener('resize', () => {\r\n\t\t\tthis.model.screenResize();\r\n\t\t\tconst event = new Event('mousemove');\r\n\t\t\tthis.canvas.dispatchEvent(event);\r\n\t\t});\r\n\t\tthis.keysController();\r\n\t\tthis.mouseController();\r\n\t\tthis.socketController();\r\n\t}\r\n\r\n\tstatic run(): void {\r\n\t\tif (!Controller.instance) {\r\n\t\t\tController.instance = new Controller();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error('Only one controller!');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate socketController(): void {\r\n\t\tthis.socket.emit('syncTime', 0);\r\n\t\tthis.socket.on('serverClientSync', (clientDateNow, serverDateNow) => {\r\n\t\t\tconst timeNow = Date.now();\r\n\t\t\tconst ping = timeNow - clientDateNow;\r\n\t\t\tconst timeDiferenceClientServer = timeNow - serverDateNow;\r\n\t\t\tthis.serverClientSync.addData(ping, timeDiferenceClientServer);\r\n\t\t\tconsole.log(this.serverClientSync);\r\n\t\t});\r\n\r\n\t\tthis.socket.on('socketEvent', (data) => {\r\n\t\t\tconsole.log(data);\r\n\t\t});\r\n\r\n\t\tthis.socket.on('syncTime', (serverTime) => {\r\n\t\t\tController.timeDiference = Date.now() - serverTime;\r\n\t\t\tconsole.log('syncTime', Controller.timeDiference);\r\n\t\t});\r\n\r\n\t\tthis.socket.on('p', (x, y, time, tick) => {\r\n\t\t\t//console.log('transport time:', Date.now() - time);\r\n\t\t\tconst ping = Math.round(Math.random() * 25);\r\n\t\t\t//console.log('ping:', ping);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (Controller.playerData.length) {\r\n\t\t\t\t\tconst lastTick = Controller.playerData[Controller.playerData.length - 1].tick;\r\n\t\t\t\t\t//if (tick - 1 !== lastTick) console.log('spatne poradi ticku');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tController.playerData.push({ x, y, time: time, tick: tick });\r\n\t\t\t}, ping);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate mouseController(): void {\r\n\t\tthis.canvas.addEventListener('mousemove', (e: MouseEvent) => {\r\n\t\t\tif (e.x == undefined) {\r\n\t\t\t\tthis.mouse.x = this.canvas.width / 2;\r\n\t\t\t\tthis.mouse.y = this.canvas.height / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.mouse.x = e.x;\r\n\t\t\t\tthis.mouse.y = e.y;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.canvas.addEventListener('click', (e: MouseEvent) => {\r\n\t\t\tthis.mouse.left = true;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate keysController(): void {\r\n\t\tdocument.addEventListener('keydown', (e: KeyboardEvent) => {\r\n\t\t\tswitch (e.code) {\r\n\t\t\t\tcase 'KeyW':\r\n\t\t\t\t\tthis.keys.w = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyA':\r\n\t\t\t\t\tthis.keys.a = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyS':\r\n\t\t\t\t\tthis.keys.s = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyD':\r\n\t\t\t\t\tthis.keys.d = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener('keyup', (e: KeyboardEvent) => {\r\n\t\t\tswitch (e.code) {\r\n\t\t\t\tcase 'KeyW':\r\n\t\t\t\t\tthis.keys.w = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyA':\r\n\t\t\t\t\tthis.keys.a = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyS':\r\n\t\t\t\t\tthis.keys.s = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'KeyD':\r\n\t\t\t\t\tthis.keys.d = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import { Controller } from './Controller';\r\nController.run();\r\n"],"sourceRoot":""}